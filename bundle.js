!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.wkldle=t():e.wkldle=t()}(this,(()=>(()=>{var e={209:function(e){var t;t=function(){"use strict";var e,t,s="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},r={load:function(e,t,s={}){var r,o,n;for(r in t)n=t[r],s[r]=null!=(o=e[r])?o:n;return s},overwrite:function(e,t,s={}){var r,o;for(r in e)o=e[r],void 0!==t[r]&&(s[r]=o);return s}},o=class{constructor(e,t){this.incr=e,this.decr=t,this._first=null,this._last=null,this.length=0}push(e){var t;this.length++,"function"==typeof this.incr&&this.incr(),t={value:e,prev:this._last,next:null},null!=this._last?(this._last.next=t,this._last=t):this._first=this._last=t}shift(){var e;if(null!=this._first)return this.length--,"function"==typeof this.decr&&this.decr(),e=this._first.value,null!=(this._first=this._first.next)?this._first.prev=null:this._last=null,e}first(){if(null!=this._first)return this._first.value}getArray(){var e,t,s;for(e=this._first,s=[];null!=e;)s.push((t=e,e=e.next,t.value));return s}forEachShift(e){var t;for(t=this.shift();null!=t;)e(t),t=this.shift()}debug(){var e,t,s,r,o;for(e=this._first,o=[];null!=e;)o.push((t=e,e=e.next,{value:t.value,prev:null!=(s=t.prev)?s.value:void 0,next:null!=(r=t.next)?r.value:void 0}));return o}},n=class{constructor(e){if(this.instance=e,this._events={},null!=this.instance.on||null!=this.instance.once||null!=this.instance.removeAllListeners)throw new Error("An Emitter already exists for this object");this.instance.on=(e,t)=>this._addListener(e,"many",t),this.instance.once=(e,t)=>this._addListener(e,"once",t),this.instance.removeAllListeners=(e=null)=>null!=e?delete this._events[e]:this._events={}}_addListener(e,t,s){var r;return null==(r=this._events)[e]&&(r[e]=[]),this._events[e].push({cb:s,status:t}),this.instance}listenerCount(e){return null!=this._events[e]?this._events[e].length:0}async trigger(e,...t){var s,r;try{if("debug"!==e&&this.trigger("debug",`Event triggered: ${e}`,t),null==this._events[e])return;return this._events[e]=this._events[e].filter((function(e){return"none"!==e.status})),r=this._events[e].map((async e=>{var s,r;if("none"!==e.status){"once"===e.status&&(e.status="none");try{return"function"==typeof(null!=(r="function"==typeof e.cb?e.cb(...t):void 0)?r.then:void 0)?await r:r}catch(e){return s=e,this.trigger("error",s),null}}})),(await Promise.all(r)).find((function(e){return null!=e}))}catch(e){return s=e,this.trigger("error",s),null}}};e=o,t=n;var i,a,c=class extends Error{};a=r,i=c;var l,u,p=class{constructor(e,t,s,r,o,n,i,c){this.task=e,this.args=t,this.rejectOnDrop=o,this.Events=n,this._states=i,this.Promise=c,this.options=a.load(s,r),this.options.priority=this._sanitizePriority(this.options.priority),this.options.id===r.id&&(this.options.id=`${this.options.id}-${this._randomIndex()}`),this.promise=new this.Promise(((e,t)=>{this._resolve=e,this._reject=t})),this.retryCount=0}_sanitizePriority(e){var t;return(t=~~e!==e?5:e)<0?0:t>9?9:t}_randomIndex(){return Math.random().toString(36).slice(2)}doDrop({error:e,message:t="This job has been dropped by Bottleneck"}={}){return!!this._states.remove(this.options.id)&&(this.rejectOnDrop&&this._reject(null!=e?e:new i(t)),this.Events.trigger("dropped",{args:this.args,options:this.options,task:this.task,promise:this.promise}),!0)}_assertStatus(e){var t;if((t=this._states.jobStatus(this.options.id))!==e&&("DONE"!==e||null!==t))throw new i(`Invalid job status ${t}, expected ${e}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`)}doReceive(){return this._states.start(this.options.id),this.Events.trigger("received",{args:this.args,options:this.options})}doQueue(e,t){return this._assertStatus("RECEIVED"),this._states.next(this.options.id),this.Events.trigger("queued",{args:this.args,options:this.options,reachedHWM:e,blocked:t})}doRun(){return 0===this.retryCount?(this._assertStatus("QUEUED"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),this.Events.trigger("scheduled",{args:this.args,options:this.options})}async doExecute(e,t,s,r){var o,n,i;0===this.retryCount?(this._assertStatus("RUNNING"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),n={args:this.args,options:this.options,retryCount:this.retryCount},this.Events.trigger("executing",n);try{if(i=await(null!=e?e.schedule(this.options,this.task,...this.args):this.task(...this.args)),t())return this.doDone(n),await r(this.options,n),this._assertStatus("DONE"),this._resolve(i)}catch(e){return o=e,this._onFailure(o,n,t,s,r)}}doExpire(e,t,s){var r,o;return this._states.jobStatus("RUNNING"===this.options.id)&&this._states.next(this.options.id),this._assertStatus("EXECUTING"),o={args:this.args,options:this.options,retryCount:this.retryCount},r=new i(`This job timed out after ${this.options.expiration} ms.`),this._onFailure(r,o,e,t,s)}async _onFailure(e,t,s,r,o){var n,i;if(s())return null!=(n=await this.Events.trigger("failed",e,t))?(i=~~n,this.Events.trigger("retry",`Retrying ${this.options.id} after ${i} ms`,t),this.retryCount++,r(i)):(this.doDone(t),await o(this.options,t),this._assertStatus("DONE"),this._reject(e))}doDone(e){return this._assertStatus("EXECUTING"),this._states.next(this.options.id),this.Events.trigger("done",e)}};u=r,l=c;var d;d=c;var h;h=o;var g,m,_,f,T,y="2.19.5",E={version:y},w=Object.freeze({version:y,default:E}),b=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),v=()=>console.log("You must import the full version of Bottleneck in order to use this feature.");T=r,g=n,_=b,m=v,f=()=>console.log("You must import the full version of Bottleneck in order to use this feature.");var k,S,O=function(){class e{constructor(e={}){this.deleteKey=this.deleteKey.bind(this),this.limiterOptions=e,T.load(this.limiterOptions,this.defaults,this),this.Events=new g(this),this.instances={},this.Bottleneck=x,this._startAutoCleanup(),this.sharedConnection=null!=this.connection,null==this.connection&&("redis"===this.limiterOptions.datastore?this.connection=new _(Object.assign({},this.limiterOptions,{Events:this.Events})):"ioredis"===this.limiterOptions.datastore&&(this.connection=new m(Object.assign({},this.limiterOptions,{Events:this.Events}))))}key(e=""){var t;return null!=(t=this.instances[e])?t:(()=>{var t;return t=this.instances[e]=new this.Bottleneck(Object.assign(this.limiterOptions,{id:`${this.id}-${e}`,timeout:this.timeout,connection:this.connection})),this.Events.trigger("created",t,e),t})()}async deleteKey(e=""){var t,s;return s=this.instances[e],this.connection&&(t=await this.connection.__runCommand__(["del",...f.allKeys(`${this.id}-${e}`)])),null!=s&&(delete this.instances[e],await s.disconnect()),null!=s||t>0}limiters(){var e,t,s,r;for(e in s=[],t=this.instances)r=t[e],s.push({key:e,limiter:r});return s}keys(){return Object.keys(this.instances)}async clusterKeys(){var e,t,s,r,o,n,i,a;if(null==this.connection)return this.Promise.resolve(this.keys());for(o=[],e=null,a=`b_${this.id}-`.length;0!==e;)for([i,t]=await this.connection.__runCommand__(["scan",null!=e?e:0,"match",`b_${this.id}-*_settings`,"count",1e4]),e=~~i,s=0,n=t.length;s<n;s++)r=t[s],o.push(r.slice(a,-9));return o}_startAutoCleanup(){var e;return clearInterval(this.interval),"function"==typeof(e=this.interval=setInterval((async()=>{var e,t,s,r,o,n;for(t in o=Date.now(),r=[],s=this.instances){n=s[t];try{await n._store.__groupCheck__(o)?r.push(this.deleteKey(t)):r.push(void 0)}catch(t){e=t,r.push(n.Events.trigger("error",e))}}return r}),this.timeout/2)).unref?e.unref():void 0}updateSettings(e={}){if(T.overwrite(e,this.defaults,this),T.overwrite(e,e,this.limiterOptions),null!=e.timeout)return this._startAutoCleanup()}disconnect(e=!0){var t;if(!this.sharedConnection)return null!=(t=this.connection)?t.disconnect(e):void 0}}return e.prototype.defaults={timeout:3e5,connection:null,Promise,id:"group-key"},e}.call(s);S=r,k=n;var A,P,G,R,F,D,I,U,C,L=function(){class e{constructor(e={}){this.options=e,S.load(this.options,this.defaults,this),this.Events=new k(this),this._arr=[],this._resetPromise(),this._lastFlush=Date.now()}_resetPromise(){return this._promise=new this.Promise(((e,t)=>this._resolve=e))}_flush(){return clearTimeout(this._timeout),this._lastFlush=Date.now(),this._resolve(),this.Events.trigger("batch",this._arr),this._arr=[],this._resetPromise()}add(e){var t;return this._arr.push(e),t=this._promise,this._arr.length===this.maxSize?this._flush():null!=this.maxTime&&1===this._arr.length&&(this._timeout=setTimeout((()=>this._flush()),this.maxTime)),t}}return e.prototype.defaults={maxTime:null,maxSize:null,Promise},e}.call(s),j=(A=w)&&A.default||A,q=[].splice;C=r,F=class{constructor(s){this.Events=new t(this),this._length=0,this._lists=function(){var t,r,o;for(o=[],t=1,r=s;1<=r?t<=r:t>=r;1<=r?++t:--t)o.push(new e((()=>this.incr()),(()=>this.decr())));return o}.call(this)}incr(){if(0==this._length++)return this.Events.trigger("leftzero")}decr(){if(0==--this._length)return this.Events.trigger("zero")}push(e){return this._lists[e.options.priority].push(e)}queued(e){return null!=e?this._lists[e].length:this._length}shiftAll(e){return this._lists.forEach((function(t){return t.forEachShift(e)}))}getFirst(e=this._lists){var t,s,r;for(t=0,s=e.length;t<s;t++)if((r=e[t]).length>0)return r;return[]}shiftLastFrom(e){return this.getFirst(this._lists.slice(e).reverse()).shift()}},G=p,R=class{constructor(e,t,s){this.instance=e,this.storeOptions=t,this.clientId=this.instance._randomIndex(),u.load(s,s,this),this._nextRequest=this._lastReservoirRefresh=this._lastReservoirIncrease=Date.now(),this._running=0,this._done=0,this._unblockTime=0,this.ready=this.Promise.resolve(),this.clients={},this._startHeartbeat()}_startHeartbeat(){var e;return null==this.heartbeat&&(null!=this.storeOptions.reservoirRefreshInterval&&null!=this.storeOptions.reservoirRefreshAmount||null!=this.storeOptions.reservoirIncreaseInterval&&null!=this.storeOptions.reservoirIncreaseAmount)?"function"==typeof(e=this.heartbeat=setInterval((()=>{var e,t,s,r,o;if(r=Date.now(),null!=this.storeOptions.reservoirRefreshInterval&&r>=this._lastReservoirRefresh+this.storeOptions.reservoirRefreshInterval&&(this._lastReservoirRefresh=r,this.storeOptions.reservoir=this.storeOptions.reservoirRefreshAmount,this.instance._drainAll(this.computeCapacity())),null!=this.storeOptions.reservoirIncreaseInterval&&r>=this._lastReservoirIncrease+this.storeOptions.reservoirIncreaseInterval&&(({reservoirIncreaseAmount:e,reservoirIncreaseMaximum:s,reservoir:o}=this.storeOptions),this._lastReservoirIncrease=r,(t=null!=s?Math.min(e,s-o):e)>0))return this.storeOptions.reservoir+=t,this.instance._drainAll(this.computeCapacity())}),this.heartbeatInterval)).unref?e.unref():void 0:clearInterval(this.heartbeat)}async __publish__(e){return await this.yieldLoop(),this.instance.Events.trigger("message",e.toString())}async __disconnect__(e){return await this.yieldLoop(),clearInterval(this.heartbeat),this.Promise.resolve()}yieldLoop(e=0){return new this.Promise((function(t,s){return setTimeout(t,e)}))}computePenalty(){var e;return null!=(e=this.storeOptions.penalty)?e:15*this.storeOptions.minTime||5e3}async __updateSettings__(e){return await this.yieldLoop(),u.overwrite(e,e,this.storeOptions),this._startHeartbeat(),this.instance._drainAll(this.computeCapacity()),!0}async __running__(){return await this.yieldLoop(),this._running}async __queued__(){return await this.yieldLoop(),this.instance.queued()}async __done__(){return await this.yieldLoop(),this._done}async __groupCheck__(e){return await this.yieldLoop(),this._nextRequest+this.timeout<e}computeCapacity(){var e,t;return({maxConcurrent:e,reservoir:t}=this.storeOptions),null!=e&&null!=t?Math.min(e-this._running,t):null!=e?e-this._running:null!=t?t:null}conditionsCheck(e){var t;return null==(t=this.computeCapacity())||e<=t}async __incrementReservoir__(e){var t;return await this.yieldLoop(),t=this.storeOptions.reservoir+=e,this.instance._drainAll(this.computeCapacity()),t}async __currentReservoir__(){return await this.yieldLoop(),this.storeOptions.reservoir}isBlocked(e){return this._unblockTime>=e}check(e,t){return this.conditionsCheck(e)&&this._nextRequest-t<=0}async __check__(e){var t;return await this.yieldLoop(),t=Date.now(),this.check(e,t)}async __register__(e,t,s){var r,o;return await this.yieldLoop(),r=Date.now(),this.conditionsCheck(t)?(this._running+=t,null!=this.storeOptions.reservoir&&(this.storeOptions.reservoir-=t),o=Math.max(this._nextRequest-r,0),this._nextRequest=r+o+this.storeOptions.minTime,{success:!0,wait:o,reservoir:this.storeOptions.reservoir}):{success:!1}}strategyIsBlock(){return 3===this.storeOptions.strategy}async __submit__(e,t){var s,r,o;if(await this.yieldLoop(),null!=this.storeOptions.maxConcurrent&&t>this.storeOptions.maxConcurrent)throw new l(`Impossible to add a job having a weight of ${t} to a limiter having a maxConcurrent setting of ${this.storeOptions.maxConcurrent}`);return r=Date.now(),o=null!=this.storeOptions.highWater&&e===this.storeOptions.highWater&&!this.check(t,r),(s=this.strategyIsBlock()&&(o||this.isBlocked(r)))&&(this._unblockTime=r+this.computePenalty(),this._nextRequest=this._unblockTime+this.storeOptions.minTime,this.instance._dropAllQueued()),{reachedHWM:o,blocked:s,strategy:this.storeOptions.strategy}}async __free__(e,t){return await this.yieldLoop(),this._running-=t,this._done+=t,this.instance._drainAll(this.computeCapacity()),{running:this._running}}},D=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),P=n,I=class{constructor(e){this.status=e,this._jobs={},this.counts=this.status.map((function(){return 0}))}next(e){var t,s;return s=(t=this._jobs[e])+1,null!=t&&s<this.status.length?(this.counts[t]--,this.counts[s]++,this._jobs[e]++):null!=t?(this.counts[t]--,delete this._jobs[e]):void 0}start(e){return this._jobs[e]=0,this.counts[0]++}remove(e){var t;return null!=(t=this._jobs[e])&&(this.counts[t]--,delete this._jobs[e]),null!=t}jobStatus(e){var t;return null!=(t=this.status[this._jobs[e]])?t:null}statusJobs(e){var t,s,r,o;if(null!=e){if((s=this.status.indexOf(e))<0)throw new d(`status must be one of ${this.status.join(", ")}`);for(t in o=[],r=this._jobs)r[t]===s&&o.push(t);return o}return Object.keys(this._jobs)}statusCounts(){return this.counts.reduce(((e,t,s)=>(e[this.status[s]]=t,e)),{})}},U=class{constructor(e,t){this.schedule=this.schedule.bind(this),this.name=e,this.Promise=t,this._running=0,this._queue=new h}isEmpty(){return 0===this._queue.length}async _tryToRun(){var e,t,s,r,o,n,i;if(this._running<1&&this._queue.length>0)return this._running++,({task:i,args:e,resolve:o,reject:r}=this._queue.shift()),t=await async function(){try{return n=await i(...e),function(){return o(n)}}catch(e){return s=e,function(){return r(s)}}}(),this._running--,this._tryToRun(),t()}schedule(e,...t){var s,r,o;return o=r=null,s=new this.Promise((function(e,t){return o=e,r=t})),this._queue.push({task:e,args:t,resolve:o,reject:r}),this._tryToRun(),s}};var x=function(){class e{constructor(t={},...s){var r,o;this._addToQueue=this._addToQueue.bind(this),this._validateOptions(t,s),C.load(t,this.instanceDefaults,this),this._queues=new F(10),this._scheduled={},this._states=new I(["RECEIVED","QUEUED","RUNNING","EXECUTING"].concat(this.trackDoneStatus?["DONE"]:[])),this._limiter=null,this.Events=new P(this),this._submitLock=new U("submit",this.Promise),this._registerLock=new U("register",this.Promise),o=C.load(t,this.storeDefaults,{}),this._store=function(){if("redis"===this.datastore||"ioredis"===this.datastore||null!=this.connection)return r=C.load(t,this.redisStoreDefaults,{}),new D(this,o,r);if("local"===this.datastore)return r=C.load(t,this.localStoreDefaults,{}),new R(this,o,r);throw new e.prototype.BottleneckError(`Invalid datastore type: ${this.datastore}`)}.call(this),this._queues.on("leftzero",(()=>{var e;return null!=(e=this._store.heartbeat)&&"function"==typeof e.ref?e.ref():void 0})),this._queues.on("zero",(()=>{var e;return null!=(e=this._store.heartbeat)&&"function"==typeof e.unref?e.unref():void 0}))}_validateOptions(t,s){if(null==t||"object"!=typeof t||0!==s.length)throw new e.prototype.BottleneckError("Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.")}ready(){return this._store.ready}clients(){return this._store.clients}channel(){return`b_${this.id}`}channel_client(){return`b_${this.id}_${this._store.clientId}`}publish(e){return this._store.__publish__(e)}disconnect(e=!0){return this._store.__disconnect__(e)}chain(e){return this._limiter=e,this}queued(e){return this._queues.queued(e)}clusterQueued(){return this._store.__queued__()}empty(){return 0===this.queued()&&this._submitLock.isEmpty()}running(){return this._store.__running__()}done(){return this._store.__done__()}jobStatus(e){return this._states.jobStatus(e)}jobs(e){return this._states.statusJobs(e)}counts(){return this._states.statusCounts()}_randomIndex(){return Math.random().toString(36).slice(2)}check(e=1){return this._store.__check__(e)}_clearGlobalState(e){return null!=this._scheduled[e]&&(clearTimeout(this._scheduled[e].expiration),delete this._scheduled[e],!0)}async _free(e,t,s,r){var o,n;try{if(({running:n}=await this._store.__free__(e,s.weight)),this.Events.trigger("debug",`Freed ${s.id}`,r),0===n&&this.empty())return this.Events.trigger("idle")}catch(e){return o=e,this.Events.trigger("error",o)}}_run(e,t,s){var r,o,n;return t.doRun(),r=this._clearGlobalState.bind(this,e),n=this._run.bind(this,e,t),o=this._free.bind(this,e,t),this._scheduled[e]={timeout:setTimeout((()=>t.doExecute(this._limiter,r,n,o)),s),expiration:null!=t.options.expiration?setTimeout((function(){return t.doExpire(r,n,o)}),s+t.options.expiration):void 0,job:t}}_drainOne(e){return this._registerLock.schedule((()=>{var t,s,r,o,n;return 0===this.queued()?this.Promise.resolve(null):(n=this._queues.getFirst(),({options:o,args:t}=r=n.first()),null!=e&&o.weight>e?this.Promise.resolve(null):(this.Events.trigger("debug",`Draining ${o.id}`,{args:t,options:o}),s=this._randomIndex(),this._store.__register__(s,o.weight,o.expiration).then((({success:e,wait:i,reservoir:a})=>{var c;return this.Events.trigger("debug",`Drained ${o.id}`,{success:e,args:t,options:o}),e?(n.shift(),(c=this.empty())&&this.Events.trigger("empty"),0===a&&this.Events.trigger("depleted",c),this._run(s,r,i),this.Promise.resolve(o.weight)):this.Promise.resolve(null)}))))}))}_drainAll(e,t=0){return this._drainOne(e).then((s=>{var r;return null!=s?(r=null!=e?e-s:e,this._drainAll(r,t+s)):this.Promise.resolve(t)})).catch((e=>this.Events.trigger("error",e)))}_dropAllQueued(e){return this._queues.shiftAll((function(t){return t.doDrop({message:e})}))}stop(t={}){var s,r;return t=C.load(t,this.stopDefaults),r=e=>{var t;return t=()=>{var t;return(t=this._states.counts)[0]+t[1]+t[2]+t[3]===e},new this.Promise(((e,s)=>t()?e():this.on("done",(()=>{if(t())return this.removeAllListeners("done"),e()}))))},s=t.dropWaitingJobs?(this._run=function(e,s){return s.doDrop({message:t.dropErrorMessage})},this._drainOne=()=>this.Promise.resolve(null),this._registerLock.schedule((()=>this._submitLock.schedule((()=>{var e,s,o;for(e in s=this._scheduled)o=s[e],"RUNNING"===this.jobStatus(o.job.options.id)&&(clearTimeout(o.timeout),clearTimeout(o.expiration),o.job.doDrop({message:t.dropErrorMessage}));return this._dropAllQueued(t.dropErrorMessage),r(0)}))))):this.schedule({priority:9,weight:0},(()=>r(1))),this._receive=function(s){return s._reject(new e.prototype.BottleneckError(t.enqueueErrorMessage))},this.stop=()=>this.Promise.reject(new e.prototype.BottleneckError("stop() has already been called")),s}async _addToQueue(t){var s,r,o,n,i,a,c;({args:s,options:n}=t);try{({reachedHWM:i,blocked:r,strategy:c}=await this._store.__submit__(this.queued(),n.weight))}catch(e){return o=e,this.Events.trigger("debug",`Could not queue ${n.id}`,{args:s,options:n,error:o}),t.doDrop({error:o}),!1}return r?(t.doDrop(),!0):i&&(null!=(a=c===e.prototype.strategy.LEAK?this._queues.shiftLastFrom(n.priority):c===e.prototype.strategy.OVERFLOW_PRIORITY?this._queues.shiftLastFrom(n.priority+1):c===e.prototype.strategy.OVERFLOW?t:void 0)&&a.doDrop(),null==a||c===e.prototype.strategy.OVERFLOW)?(null==a&&t.doDrop(),i):(t.doQueue(i,r),this._queues.push(t),await this._drainAll(),i)}_receive(t){return null!=this._states.jobStatus(t.options.id)?(t._reject(new e.prototype.BottleneckError(`A job with the same id already exists (id=${t.options.id})`)),!1):(t.doReceive(),this._submitLock.schedule(this._addToQueue,t))}submit(...e){var t,s,r,o,n,i,a;return"function"==typeof e[0]?(n=e,[s,...e]=n,[t]=q.call(e,-1),o=C.load({},this.jobDefaults)):(i=e,[o,s,...e]=i,[t]=q.call(e,-1),o=C.load(o,this.jobDefaults)),a=(...e)=>new this.Promise((function(t,r){return s(...e,(function(...e){return(null!=e[0]?r:t)(e)}))})),(r=new G(a,e,o,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise)).promise.then((function(e){return"function"==typeof t?t(...e):void 0})).catch((function(e){return Array.isArray(e)?"function"==typeof t?t(...e):void 0:"function"==typeof t?t(e):void 0})),this._receive(r)}schedule(...e){var t,s,r;return"function"==typeof e[0]?([r,...e]=e,s={}):[s,r,...e]=e,t=new G(r,e,s,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),this._receive(t),t.promise}wrap(e){var t,s;return t=this.schedule.bind(this),(s=function(...s){return t(e.bind(this),...s)}).withOptions=function(s,...r){return t(s,e,...r)},s}async updateSettings(e={}){return await this._store.__updateSettings__(C.overwrite(e,this.storeDefaults)),C.overwrite(e,this.instanceDefaults,this),this}currentReservoir(){return this._store.__currentReservoir__()}incrementReservoir(e=0){return this._store.__incrementReservoir__(e)}}return e.default=e,e.Events=P,e.version=e.prototype.version=j.version,e.strategy=e.prototype.strategy={LEAK:1,OVERFLOW:2,OVERFLOW_PRIORITY:4,BLOCK:3},e.BottleneckError=e.prototype.BottleneckError=c,e.Group=e.prototype.Group=O,e.RedisConnection=e.prototype.RedisConnection=b,e.IORedisConnection=e.prototype.IORedisConnection=v,e.Batcher=e.prototype.Batcher=L,e.prototype.jobDefaults={priority:5,weight:1,expiration:null,id:"<no-id>"},e.prototype.storeDefaults={maxConcurrent:null,minTime:0,highWater:null,strategy:e.prototype.strategy.LEAK,penalty:null,reservoir:null,reservoirRefreshInterval:null,reservoirRefreshAmount:null,reservoirIncreaseInterval:null,reservoirIncreaseAmount:null,reservoirIncreaseMaximum:null},e.prototype.localStoreDefaults={Promise,timeout:null,heartbeatInterval:250},e.prototype.redisStoreDefaults={Promise,timeout:null,heartbeatInterval:5e3,clientTimeout:1e4,Redis:null,clientOptions:{},clusterNodes:null,clearDatastore:!1,connection:null},e.prototype.instanceDefaults={datastore:"local",connection:null,id:"<no-id>",rejectOnDrop:!0,trackDoneStatus:!1,Promise},e.prototype.stopDefaults={enqueueErrorMessage:"This limiter has been stopped and cannot accept new jobs.",dropWaitingJobs:!0,dropErrorMessage:"This limiter has been stopped."},e}.call(s);return x},e.exports=t()},371:(e,t,s)=>{s(738).config(Object.assign({},s(547),s(962)(process.argv)))},962:e=>{const t=/^dotenv_config_(encoding|path|debug|override|DOTENV_KEY)=(.+)$/;e.exports=function(e){return e.reduce((function(e,s){const r=s.match(t);return r&&(e[r[1]]=r[2]),e}),{})}},547:e=>{const t={};null!=process.env.DOTENV_CONFIG_ENCODING&&(t.encoding=process.env.DOTENV_CONFIG_ENCODING),null!=process.env.DOTENV_CONFIG_PATH&&(t.path=process.env.DOTENV_CONFIG_PATH),null!=process.env.DOTENV_CONFIG_DEBUG&&(t.debug=process.env.DOTENV_CONFIG_DEBUG),null!=process.env.DOTENV_CONFIG_OVERRIDE&&(t.override=process.env.DOTENV_CONFIG_OVERRIDE),null!=process.env.DOTENV_CONFIG_DOTENV_KEY&&(t.DOTENV_KEY=process.env.DOTENV_CONFIG_DOTENV_KEY),e.exports=t},738:(e,t,s)=>{const r=s(147),o=s(17),n=s(37),i=s(113),a=s(968).version,c=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;function l(e){console.log(`[dotenv@${a}][DEBUG] ${e}`)}function u(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function p(e,t){let s;try{s=new URL(t)}catch(e){if("ERR_INVALID_URL"===e.code){const e=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw e.code="INVALID_DOTENV_KEY",e}throw e}const r=s.password;if(!r){const e=new Error("INVALID_DOTENV_KEY: Missing key part");throw e.code="INVALID_DOTENV_KEY",e}const o=s.searchParams.get("environment");if(!o){const e=new Error("INVALID_DOTENV_KEY: Missing environment part");throw e.code="INVALID_DOTENV_KEY",e}const n=`DOTENV_VAULT_${o.toUpperCase()}`,i=e.parsed[n];if(!i){const e=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${n} in your .env.vault file.`);throw e.code="NOT_FOUND_DOTENV_ENVIRONMENT",e}return{ciphertext:i,key:r}}function d(e){let t=null;if(e&&e.path&&e.path.length>0)if(Array.isArray(e.path))for(const s of e.path)r.existsSync(s)&&(t=s.endsWith(".vault")?s:`${s}.vault`);else t=e.path.endsWith(".vault")?e.path:`${e.path}.vault`;else t=o.resolve(process.cwd(),".env.vault");return r.existsSync(t)?t:null}function h(e){return"~"===e[0]?o.join(n.homedir(),e.slice(1)):e}const g={configDotenv:function(e){const t=o.resolve(process.cwd(),".env");let s="utf8";const n=Boolean(e&&e.debug);e&&e.encoding?s=e.encoding:n&&l("No encoding is specified. UTF-8 is used by default");let i,a=[t];if(e&&e.path)if(Array.isArray(e.path)){a=[];for(const t of e.path)a.push(h(t))}else a=[h(e.path)];const c={};for(const t of a)try{const o=g.parse(r.readFileSync(t,{encoding:s}));g.populate(c,o,e)}catch(e){n&&l(`Failed to load ${t} ${e.message}`),i=e}let u=process.env;return e&&null!=e.processEnv&&(u=e.processEnv),g.populate(u,c,e),i?{parsed:c,error:i}:{parsed:c}},_configVault:function(e){console.log(`[dotenv@${a}][INFO] Loading env from encrypted .env.vault`);const t=g._parseVault(e);let s=process.env;return e&&null!=e.processEnv&&(s=e.processEnv),g.populate(s,t,e),{parsed:t}},_parseVault:function(e){const t=d(e),s=g.configDotenv({path:t});if(!s.parsed){const e=new Error(`MISSING_DATA: Cannot parse ${t} for an unknown reason`);throw e.code="MISSING_DATA",e}const r=u(e).split(","),o=r.length;let n;for(let e=0;e<o;e++)try{const t=p(s,r[e].trim());n=g.decrypt(t.ciphertext,t.key);break}catch(t){if(e+1>=o)throw t}return g.parse(n)},config:function(e){if(0===u(e).length)return g.configDotenv(e);const t=d(e);return t?g._configVault(e):(s=`You set DOTENV_KEY but you are missing a .env.vault file at ${t}. Did you forget to build it?`,console.log(`[dotenv@${a}][WARN] ${s}`),g.configDotenv(e));var s},decrypt:function(e,t){const s=Buffer.from(t.slice(-64),"hex");let r=Buffer.from(e,"base64");const o=r.subarray(0,12),n=r.subarray(-16);r=r.subarray(12,-16);try{const e=i.createDecipheriv("aes-256-gcm",s,o);return e.setAuthTag(n),`${e.update(r)}${e.final()}`}catch(e){const t=e instanceof RangeError,s="Invalid key length"===e.message,r="Unsupported state or unable to authenticate data"===e.message;if(t||s){const e=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw e.code="INVALID_DOTENV_KEY",e}if(r){const e=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw e.code="DECRYPTION_FAILED",e}throw e}},parse:function(e){const t={};let s,r=e.toString();for(r=r.replace(/\r\n?/gm,"\n");null!=(s=c.exec(r));){const e=s[1];let r=s[2]||"";r=r.trim();const o=r[0];r=r.replace(/^(['"`])([\s\S]*)\1$/gm,"$2"),'"'===o&&(r=r.replace(/\\n/g,"\n"),r=r.replace(/\\r/g,"\r")),t[e]=r}return t},populate:function(e,t,s={}){const r=Boolean(s&&s.debug),o=Boolean(s&&s.override);if("object"!=typeof t){const e=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw e.code="OBJECT_REQUIRED",e}for(const s of Object.keys(t))Object.prototype.hasOwnProperty.call(e,s)?(!0===o&&(e[s]=t[s]),r&&l(!0===o?`"${s}" is already defined and WAS overwritten`:`"${s}" is already defined and was NOT overwritten`)):e[s]=t[s]}};e.exports.configDotenv=g.configDotenv,e.exports._configVault=g._configVault,e.exports._parseVault=g._parseVault,e.exports.config=g.config,e.exports.decrypt=g.decrypt,e.exports.parse=g.parse,e.exports.populate=g.populate,e.exports=g},113:e=>{"use strict";e.exports=require("crypto")},147:e=>{"use strict";e.exports=require("fs")},37:e=>{"use strict";e.exports=require("os")},17:e=>{"use strict";e.exports=require("path")},968:e=>{"use strict";e.exports=JSON.parse('{"name":"dotenv","version":"16.4.5","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"types":"./lib/main.d.ts","require":"./lib/main.js","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","lint-readme":"standard-markdown","pretest":"npm run lint && npm run dts-check","test":"tap tests/*.js --100 -Rspec","test:coverage":"tap --coverage-report=lcov","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"funding":"https://dotenvx.com","keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@definitelytyped/dtslint":"^0.0.133","@types/node":"^18.11.3","decache":"^4.6.1","sinon":"^14.0.1","standard":"^17.0.0","standard-markdown":"^7.1.0","standard-version":"^9.5.0","tap":"^16.3.0","tar":"^6.1.11","typescript":"^4.8.4"},"engines":{"node":">=12"},"browser":{"fs":false}}')}},t={};function s(r){var o=t[r];if(void 0!==o)return o.exports;var n=t[r]={exports:{}};return e[r].call(n.exports,n,n.exports,s),n.exports}s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return(()=>{"use strict";s.r(r),s(371);class e extends Error{name;status;request;response;constructor(e,t,s){super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=t,"response"in s&&(this.response=s.response);const r=Object.assign({},s.request);s.request.headers.authorization&&(r.headers=Object.assign({},s.request.headers,{authorization:s.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),r.url=r.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=r}}var t=globalThis.process&&globalThis.process.release&&globalThis.process.release.name,o=t?function(e){return Buffer.from(e,"utf-8").toString("base64")}:function(e){return btoa(encodeURIComponent(e).replace(/%([0-9A-F]{2})/g,(function(e,t){return String.fromCharCode("0x"+t)})))},n=t?function(e){return Buffer.from(e,"base64").toString("utf-8")}:function(e){return decodeURIComponent(atob(e).split("").map((function(e){return"%"+("00"+e.charCodeAt(0).toString(16)).slice(-2)})).join(""))};function i(t){return{createOrUpdateTextFile:s=>async function(t,s){const{content:r,message:i,committer:a,author:c,...l}=s,u=await async function(t,s){const r="GET /repos/{owner}/{repo}/contents/{path}",{branch:o,...i}=s,a={...i,ref:o},c=t.request.endpoint(r,a),{data:l}=await t.request(r,a).catch((e=>{if(404!==e.status)throw e;return{data:{content:null,type:"",sha:""}}}));if(Array.isArray(l))throw new e(`[@octokit/plugin-create-or-update-text-file] ${c.url} is a directory`,403,{request:c});if(!("sha"in l)||!("content"in l))throw new e(`[@octokit/plugin-create-or-update-text-file] ${c.url} is not a file, but a ${l.type}`,403,{request:c});if(null===l.content)return{content:null};try{return{content:n(l.content),sha:l.sha}}catch(t){if("URI malformed"!==t.message)throw t;throw new e(`[@octokit/plugin-create-or-update-text-file] ${c.url} is a binary file, only text files are supported`,403,{request:c})}}(t,l),p="function"==typeof r?await r({exists:null!==u.content,content:u.content}):r;return p===u.content?{updated:!1,deleted:!1,data:{},headers:{}}:u.sha&&null===p?{...await t.request("DELETE /repos/{owner}/{repo}/contents/{path}",{...l,message:i,sha:u.sha}),updated:!0,deleted:!0}:{...await t.request("PUT /repos/{owner}/{repo}/contents/{path}",{...l,message:i,...u,content:o(p)}),updated:!0,deleted:!1,content:p}}(t,s)}}function a(){return"object"==typeof navigator&&"userAgent"in navigator?navigator.userAgent:"object"==typeof process&&void 0!==process.version?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}function c(e,t,s,r){if("function"!=typeof s)throw new Error("method for before hook must be a function");return r||(r={}),Array.isArray(t)?t.reverse().reduce(((t,s)=>c.bind(null,e,s,t,r)),s)():Promise.resolve().then((()=>e.registry[t]?e.registry[t].reduce(((e,t)=>t.hook.bind(null,e,r)),s)():s(r)))}function l(e,t,s,r){const o=r;e.registry[s]||(e.registry[s]=[]),"before"===t&&(r=(e,t)=>Promise.resolve().then(o.bind(null,t)).then(e.bind(null,t))),"after"===t&&(r=(e,t)=>{let s;return Promise.resolve().then(e.bind(null,t)).then((e=>(s=e,o(s,t)))).then((()=>s))}),"error"===t&&(r=(e,t)=>Promise.resolve().then(e.bind(null,t)).catch((e=>o(e,t)))),e.registry[s].push({hook:r,orig:o})}function u(e,t,s){if(!e.registry[t])return;const r=e.registry[t].map((e=>e.orig)).indexOf(s);-1!==r&&e.registry[t].splice(r,1)}i.VERSION="0.0.0-development";const p=Function.bind,d=p.bind(p);function h(e,t,s){const r=d(u,null).apply(null,s?[t,s]:[t]);e.api={remove:r},e.remove=r,["before","error","after","wrap"].forEach((r=>{const o=s?[t,r,s]:[t,r];e[r]=e.api[r]=d(l,null).apply(null,o)}))}const g=function(){const e={registry:{}},t=c.bind(null,e);return h(t,e),t};var m=`octokit-endpoint.js/0.0.0-development ${a()}`;function _(e,t){const s=Object.assign({},e);return Object.keys(t).forEach((r=>{!function(e){if("object"!=typeof e||null===e)return!1;if("[object Object]"!==Object.prototype.toString.call(e))return!1;const t=Object.getPrototypeOf(e);if(null===t)return!0;const s=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof s&&s instanceof s&&Function.prototype.call(s)===Function.prototype.call(e)}(t[r])?Object.assign(s,{[r]:t[r]}):r in e?s[r]=_(e[r],t[r]):Object.assign(s,{[r]:t[r]})})),s}function f(e){for(const t in e)void 0===e[t]&&delete e[t];return e}function T(e,t,s){if("string"==typeof t){let[e,r]=t.split(" ");s=Object.assign(r?{method:e,url:r}:{url:e},s)}else s=Object.assign({},t);var r;s.headers=(r=s.headers)?Object.keys(r).reduce(((e,t)=>(e[t.toLowerCase()]=r[t],e)),{}):{},f(s),f(s.headers);const o=_(e||{},s);return"/graphql"===s.url&&(e&&e.mediaType.previews?.length&&(o.mediaType.previews=e.mediaType.previews.filter((e=>!o.mediaType.previews.includes(e))).concat(o.mediaType.previews)),o.mediaType.previews=(o.mediaType.previews||[]).map((e=>e.replace(/-preview/,"")))),o}var y=/\{[^}]+\}/g;function E(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function w(e,t){const s={__proto__:null};for(const r of Object.keys(e))-1===t.indexOf(r)&&(s[r]=e[r]);return s}function b(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map((function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e).replace(/%5B/g,"[").replace(/%5D/g,"]")),e})).join("")}function v(e){return encodeURIComponent(e).replace(/[!'()*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function k(e,t,s){return t="+"===e||"#"===e?b(t):v(t),s?v(s)+"="+t:t}function S(e){return null!=e}function O(e){return";"===e||"&"===e||"?"===e}function A(e,t){var s=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,(function(e,r,o){if(r){let e="";const o=[];if(-1!==s.indexOf(r.charAt(0))&&(e=r.charAt(0),r=r.substr(1)),r.split(/,/g).forEach((function(s){var r=/([^:\*]*)(?::(\d+)|(\*))?/.exec(s);o.push(function(e,t,s,r){var o=e[s],n=[];if(S(o)&&""!==o)if("string"==typeof o||"number"==typeof o||"boolean"==typeof o)o=o.toString(),r&&"*"!==r&&(o=o.substring(0,parseInt(r,10))),n.push(k(t,o,O(t)?s:""));else if("*"===r)Array.isArray(o)?o.filter(S).forEach((function(e){n.push(k(t,e,O(t)?s:""))})):Object.keys(o).forEach((function(e){S(o[e])&&n.push(k(t,o[e],e))}));else{const e=[];Array.isArray(o)?o.filter(S).forEach((function(s){e.push(k(t,s))})):Object.keys(o).forEach((function(s){S(o[s])&&(e.push(v(s)),e.push(k(t,o[s].toString())))})),O(t)?n.push(v(s)+"="+e.join(",")):0!==e.length&&n.push(e.join(","))}else";"===t?S(o)&&n.push(v(s)):""!==o||"&"!==t&&"?"!==t?""===o&&n.push(""):n.push(v(s)+"=");return n}(t,e,r[1],r[2]||r[3]))})),e&&"+"!==e){var n=",";return"?"===e?n="&":"#"!==e&&(n=e),(0!==o.length?e:"")+o.join(n)}return o.join(",")}return b(o)})),"/"===e?e:e.replace(/\/$/,"")}function P(e){let t,s=e.method.toUpperCase(),r=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),o=Object.assign({},e.headers),n=w(e,["method","baseUrl","url","headers","request","mediaType"]);const i=function(e){const t=e.match(y);return t?t.map(E).reduce(((e,t)=>e.concat(t)),[]):[]}(r);var a;r=(a=r,{expand:A.bind(null,a)}).expand(n),/^http/.test(r)||(r=e.baseUrl+r);const c=w(n,Object.keys(e).filter((e=>i.includes(e))).concat("baseUrl"));if(!/application\/octet-stream/i.test(o.accept)&&(e.mediaType.format&&(o.accept=o.accept.split(/,/).map((t=>t.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`))).join(",")),r.endsWith("/graphql")&&e.mediaType.previews?.length)){const t=o.accept.match(/[\w-]+(?=-preview)/g)||[];o.accept=t.concat(e.mediaType.previews).map((t=>`application/vnd.github.${t}-preview${e.mediaType.format?`.${e.mediaType.format}`:"+json"}`)).join(",")}return["GET","HEAD"].includes(s)?r=function(e,t){const s=/\?/.test(e)?"&":"?",r=Object.keys(t);return 0===r.length?e:e+s+r.map((e=>"q"===e?"q="+t.q.split("+").map(encodeURIComponent).join("+"):`${e}=${encodeURIComponent(t[e])}`)).join("&")}(r,c):"data"in c?t=c.data:Object.keys(c).length&&(t=c),o["content-type"]||void 0===t||(o["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(s)&&void 0===t&&(t=""),Object.assign({method:s,url:r,headers:o},void 0!==t?{body:t}:null,e.request?{request:e.request}:null)}function G(e,t,s){return P(T(e,t,s))}function R(t){const s=t.request&&t.request.log?t.request.log:console,r=!1!==t.request?.parseSuccessResponseBody;(function(e){if("object"!=typeof e||null===e)return!1;if("[object Object]"!==Object.prototype.toString.call(e))return!1;const t=Object.getPrototypeOf(e);if(null===t)return!0;const s=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof s&&s instanceof s&&Function.prototype.call(s)===Function.prototype.call(e)}(t.body)||Array.isArray(t.body))&&(t.body=JSON.stringify(t.body));let o,n,i={},{fetch:a}=globalThis;if(t.request?.fetch&&(a=t.request.fetch),!a)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");return a(t.url,{method:t.method,body:t.body,redirect:t.request?.redirect,headers:Object.fromEntries(Object.entries(t.headers).map((([e,t])=>[e,String(t)]))),signal:t.request?.signal,...t.body&&{duplex:"half"}}).then((async a=>{n=a.url,o=a.status;for(const e of a.headers)i[e[0]]=e[1];if("deprecation"in i){const e=i.link&&i.link.match(/<([^>]+)>; rel="deprecation"/),r=e&&e.pop();s.warn(`[@octokit/request] "${t.method} ${t.url}" is deprecated. It is scheduled to be removed on ${i.sunset}${r?`. See ${r}`:""}`)}if(204!==o&&205!==o){if("HEAD"===t.method){if(o<400)return;throw new e(a.statusText,o,{response:{url:n,status:o,headers:i,data:void 0},request:t})}if(304===o)throw new e("Not modified",o,{response:{url:n,status:o,headers:i,data:await F(a)},request:t});if(o>=400){const s=await F(a),r=new e(function(e){if("string"==typeof e)return e;let t;return t="documentation_url"in e?` - ${e.documentation_url}`:"","message"in e?Array.isArray(e.errors)?`${e.message}: ${e.errors.map(JSON.stringify).join(", ")}${t}`:`${e.message}${t}`:`Unknown error: ${JSON.stringify(e)}`}(s),o,{response:{url:n,status:o,headers:i,data:s},request:t});throw r}return r?await F(a):a.body}})).then((e=>({status:o,url:n,headers:i,data:e}))).catch((s=>{if(s instanceof e)throw s;if("AbortError"===s.name)throw s;let r=s.message;throw"TypeError"===s.name&&"cause"in s&&(s.cause instanceof Error?r=s.cause.message:"string"==typeof s.cause&&(r=s.cause)),new e(r,500,{request:t})}))}async function F(e){const t=e.headers.get("content-type");return/application\/json/.test(t)?e.json().catch((()=>e.text())).catch((()=>"")):!t||/^text\/|charset=utf-8$/.test(t)?e.text():function(e){return e.arrayBuffer()}(e)}var D=function e(t,s){const r=t.defaults(s);return Object.assign((function(t,s){const o=r.merge(t,s);if(!o.request||!o.request.hook)return R(r.parse(o));const n=(e,t)=>R(r.parse(r.merge(e,t)));return Object.assign(n,{endpoint:r,defaults:e.bind(null,r)}),o.request.hook(n,o)}),{endpoint:r,defaults:e.bind(null,r)})}(function e(t,s){const r=T(t,s),o=G.bind(null,r);return Object.assign(o,{DEFAULTS:r,defaults:e.bind(null,r),merge:T.bind(null,r),parse:P})}(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":m},mediaType:{format:""}}),{headers:{"user-agent":`octokit-request.js/0.0.0-development ${a()}`}}),I=class extends Error{constructor(e,t,s){super("Request failed due to following response errors:\n"+s.errors.map((e=>` - ${e.message}`)).join("\n")),this.request=e,this.headers=t,this.response=s,this.errors=s.errors,this.data=s.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}name="GraphqlResponseError";errors;data},U=["method","baseUrl","url","headers","request","query","mediaType"],C=["query","method","url"],L=/\/api\/v3\/?$/;function j(e,t){const s=e.defaults(t);return Object.assign(((e,t)=>function(e,t,s){if(s){if("string"==typeof t&&"query"in s)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const e in s)if(C.includes(e))return Promise.reject(new Error(`[@octokit/graphql] "${e}" cannot be used as variable name`))}const r="string"==typeof t?Object.assign({query:t},s):t,o=Object.keys(r).reduce(((e,t)=>U.includes(t)?(e[t]=r[t],e):(e.variables||(e.variables={}),e.variables[t]=r[t],e)),{}),n=r.baseUrl||e.endpoint.DEFAULTS.baseUrl;return L.test(n)&&(o.url=n.replace(L,"/api/graphql")),e(o).then((e=>{if(e.data.errors){const t={};for(const s of Object.keys(e.headers))t[s]=e.headers[s];throw new I(o,t,e.data)}return e.data.data}))}(s,e,t)),{defaults:j.bind(null,s),endpoint:s.endpoint})}j(D,{headers:{"user-agent":`octokit-graphql.js/0.0.0-development ${a()}`},method:"POST",url:"/graphql"});var q=/^v1\./,x=/^ghs_/,z=/^ghu_/;async function $(e){const t=3===e.split(/\./).length,s=q.test(e)||x.test(e),r=z.test(e);return{type:"token",token:e,tokenType:t?"app":s?"installation":r?"user-to-server":"oauth"}}async function N(e,t,s,r){const o=t.endpoint.merge(s,r);return o.headers.authorization=function(e){return 3===e.split(/\./).length?`bearer ${e}`:`token ${e}`}(e),t(o)}var B=function(e){if(!e)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if("string"!=typeof e)throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return e=e.replace(/^(token|bearer) +/i,""),Object.assign($.bind(null,e),{hook:N.bind(null,e)})};const V="6.1.2",W=()=>{},M=console.warn.bind(console),H=console.error.bind(console),K=`octokit-core.js/${V} ${a()}`;class Y{static VERSION=V;static defaults(e){return class extends(this){constructor(...t){const s=t[0]||{};super("function"!=typeof e?Object.assign({},e,s,s.userAgent&&e.userAgent?{userAgent:`${s.userAgent} ${e.userAgent}`}:null):e(s))}}}static plugins=[];static plugin(...e){const t=this.plugins;return class extends(this){static plugins=t.concat(e.filter((e=>!t.includes(e))))}}constructor(e={}){const t=new g,s={baseUrl:D.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},e.request,{hook:t.bind(null,"request")}),mediaType:{previews:[],format:""}};var r;if(s.headers["user-agent"]=e.userAgent?`${e.userAgent} ${K}`:K,e.baseUrl&&(s.baseUrl=e.baseUrl),e.previews&&(s.mediaType.previews=e.previews),e.timeZone&&(s.headers["time-zone"]=e.timeZone),this.request=D.defaults(s),this.graphql=(r=this.request,j(r,{method:"POST",url:"/graphql"})).defaults(s),this.log=Object.assign({debug:W,info:W,warn:M,error:H},e.log),this.hook=t,e.authStrategy){const{authStrategy:s,...r}=e,o=s(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:r},e.auth));t.wrap("request",o.hook),this.auth=o}else if(e.auth){const s=B(e.auth);t.wrap("request",s.hook),this.auth=s}else this.auth=async()=>({type:"unauthenticated"});const o=this.constructor;for(let t=0;t<o.plugins.length;++t)Object.assign(this,o.plugins[t](this,e))}request;graphql;log;hook;auth}function J(e,t,s){const r="function"==typeof t?t.endpoint(s):e.request.endpoint(t,s),o="function"==typeof t?t:e.request,n=r.method,i=r.headers;let a=r.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!a)return{done:!0};try{const e=function(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data)||"url"in e.data)return e;const t=e.data.incomplete_results,s=e.data.repository_selection,r=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const o=Object.keys(e.data)[0],n=e.data[o];return e.data=n,void 0!==t&&(e.data.incomplete_results=t),void 0!==s&&(e.data.repository_selection=s),e.data.total_count=r,e}(await o({method:n,url:a,headers:i}));return a=((e.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:e}}catch(e){if(409!==e.status)throw e;return a="",{value:{status:200,headers:{},data:[]}}}}})}}function Q(e,t,s,r){return"function"==typeof s&&(r=s,s=void 0),X(e,[],J(e,t,s)[Symbol.asyncIterator](),r)}function X(e,t,s,r){return s.next().then((o=>{if(o.done)return t;let n=!1;return t=t.concat(r?r(o.value,(function(){n=!0})):o.value.data),n?t:X(e,t,s,r)}))}var Z=Object.assign(Q,{iterator:J});function ee(e){return{paginate:Object.assign(Q.bind(null,e),{iterator:J.bind(null,e)})}}ee.VERSION="0.0.0-development";var te=class extends Error{constructor(e,t){super(((e,t)=>`The cursor at "${e.join(",")}" did not change its value "${t}" after a page transition. Please make sure your that your query is set up correctly.`)(e.pathInQuery,t)),this.pageInfo=e,this.cursorValue=t,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}name="MissingCursorChangeError"},se=class extends Error{constructor(e){super(`No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ${JSON.stringify(e,null,2)}`),this.response=e,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}name="MissingPageInfo"};function re(e){const t=oe(e,"pageInfo");if(0===t.length)throw new se(e);return t}var oe=(e,t,s=[])=>{for(const o of Object.keys(e)){const n=[...s,o],i=e[o];if(i.hasOwnProperty(t))return n;if(r=i,"[object Object]"===Object.prototype.toString.call(r)){const e=oe(i,t,n);if(e.length>0)return e}}var r;return[]},ne=(e,t)=>t.reduce(((e,t)=>e[t]),e),ie=(e,t,s)=>{const r=t[t.length-1],o=[...t].slice(0,-1),n=ne(e,o);n[r]="function"==typeof s?s(n[r]):s},ae=e=>e.hasOwnProperty("hasNextPage"),ce=e=>(t,s={})=>{let r=!0,o={...s};return{[Symbol.asyncIterator]:()=>({async next(){if(!r)return{done:!0,value:{}};const s=await e.graphql(t,o),n=(e=>{const t=re(e);return{pathInQuery:t,pageInfo:ne(e,[...t,"pageInfo"])}})(s),i=(a=n.pageInfo,ae(a)?a.endCursor:a.startCursor);var a;if(r=(e=>ae(e)?e.hasNextPage:e.hasPreviousPage)(n.pageInfo),r&&i===o.cursor)throw new te(n,i);return o={...o,cursor:i},{done:!1,value:s}}})}},le=(e,t)=>{if(0===Object.keys(e).length)return Object.assign(e,t);const s=re(e),r=[...s,"nodes"],o=ne(t,r);o&&ie(e,r,(e=>[...e,...o]));const n=[...s,"edges"],i=ne(t,n);i&&ie(e,n,(e=>[...e,...i]));const a=[...s,"pageInfo"];return ie(e,a,ne(t,a)),e},ue=e=>{const t=ce(e);return async(e,s={})=>{let r={};for await(const o of t(e,s))r=le(r,o);return r}};const pe=new Map;for(const[e,t]of Object.entries({actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForEnterprise:["GET /enterprises/{enterprise}/copilot/usage"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createCustomOrganizationRole:["POST /orgs/{org}/organization-roles"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteCustomOrganizationRole:["DELETE /orgs/{org}/organization-roles/{role_id}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],patchCustomOrganizationRole:["PATCH /orgs/{org}/organization-roles/{role_id}"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}}))for(const[s,r]of Object.entries(t)){const[t,o,n]=r,[i,a]=t.split(/ /),c=Object.assign({method:i,url:a},o);pe.has(e)||pe.set(e,new Map),pe.get(e).set(s,{scope:e,methodName:s,endpointDefaults:c,decorations:n})}const de={has:({scope:e},t)=>pe.get(e).has(t),getOwnPropertyDescriptor(e,t){return{value:this.get(e,t),configurable:!0,writable:!0,enumerable:!0}},defineProperty:(e,t,s)=>(Object.defineProperty(e.cache,t,s),!0),deleteProperty:(e,t)=>(delete e.cache[t],!0),ownKeys:({scope:e})=>[...pe.get(e).keys()],set:(e,t,s)=>e.cache[t]=s,get({octokit:e,scope:t,cache:s},r){if(s[r])return s[r];const o=pe.get(t).get(r);if(!o)return;const{endpointDefaults:n,decorations:i}=o;return s[r]=i?function(e,t,s,r,o){const n=e.request.defaults(r);return Object.assign((function(...r){let i=n.endpoint.merge(...r);if(o.mapToData)return i=Object.assign({},i,{data:i[o.mapToData],[o.mapToData]:void 0}),n(i);if(o.renamed){const[r,n]=o.renamed;e.log.warn(`octokit.${t}.${s}() has been renamed to octokit.${r}.${n}()`)}if(o.deprecated&&e.log.warn(o.deprecated),o.renamedParameters){const i=n.endpoint.merge(...r);for(const[r,n]of Object.entries(o.renamedParameters))r in i&&(e.log.warn(`"${r}" parameter is deprecated for "octokit.${t}.${s}()". Use "${n}" instead`),n in i||(i[n]=i[r]),delete i[r]);return n(i)}return n(...r)}),n)}(e,t,r,n,i):e.request.defaults(n),s[r]}};function he(e){const t={};for(const s of pe.keys())t[s]=new Proxy({octokit:e,scope:s,cache:{}},de);return t}function ge(e){return{rest:he(e)}}ge.VERSION="13.2.1";var me=s(209);async function _e(e,t,s,r){if(!s.request||!s.request.request)throw s;if(s.status>=400&&!e.doNotRetry.includes(s.status)){const o=null!=r.request.retries?r.request.retries:e.retries,n=Math.pow((r.request.retryCount||0)+1,2);throw t.retry.retryRequest(s,o,n)}throw s}async function fe(e,t,s,r){const o=new me;return o.on("failed",(function(t,s){const o=~~t.request.request.retries,n=~~t.request.request.retryAfter;if(r.request.retryCount=s.retryCount+1,o>s.retryCount)return n*e.retryAfterBaseValue})),o.schedule(Te.bind(null,e,t,s),r)}async function Te(t,s,r,o){const n=await r(r,o);return n.data&&n.data.errors&&/Something went wrong while executing your query/.test(n.data.errors[0].message)?_e(t,s,new e(n.data.errors[0].message,500,{request:o,response:n}),o):n}function ye(e,t){const s=Object.assign({enabled:!0,retryAfterBaseValue:1e3,doNotRetry:[400,401,403,404,422,451],retries:3},t.retry);return s.enabled&&(e.hook.error("request",_e.bind(null,s,e)),e.hook.wrap("request",fe.bind(null,s,e))),{retry:{retryRequest:(e,t,s)=>(e.request.request=Object.assign({},e.request.request,{retries:t,retryAfter:s}),e)}}}ye.VERSION="0.0.0-development";var Ee=()=>Promise.resolve();function we(e,t,s){return e.retryLimiter.schedule(be,e,t,s)}async function be(e,t,s){const r="GET"!==s.method&&"HEAD"!==s.method,{pathname:o}=new URL(s.url,"http://github.test"),n="GET"===s.method&&o.startsWith("/search/"),i=o.startsWith("/graphql"),a=~~t.retryCount>0?{priority:0,weight:0}:{};e.clustering&&(a.expiration=6e4),(r||i)&&await e.write.key(e.id).schedule(a,Ee),r&&e.triggersNotification(o)&&await e.notifications.key(e.id).schedule(a,Ee),n&&await e.search.key(e.id).schedule(a,Ee);const c=e.global.key(e.id).schedule(a,t,s);if(i){const e=await c;if(null!=e.data.errors&&e.data.errors.some((e=>"RATE_LIMITED"===e.type)))throw Object.assign(new Error("GraphQL Rate Limit Exceeded"),{response:e,data:e.data})}return c}var ve=function(e){const t=`^(?:${["/orgs/{org}/invitations","/orgs/{org}/invitations/{invitation_id}","/orgs/{org}/teams/{team_slug}/discussions","/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments","/repos/{owner}/{repo}/collaborators/{username}","/repos/{owner}/{repo}/commits/{commit_sha}/comments","/repos/{owner}/{repo}/issues","/repos/{owner}/{repo}/issues/{issue_number}/comments","/repos/{owner}/{repo}/pulls","/repos/{owner}/{repo}/pulls/{pull_number}/comments","/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies","/repos/{owner}/{repo}/pulls/{pull_number}/merge","/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers","/repos/{owner}/{repo}/pulls/{pull_number}/reviews","/repos/{owner}/{repo}/releases","/teams/{team_id}/discussions","/teams/{team_id}/discussions/{discussion_number}/comments"].map((e=>e.split("/").map((e=>e.startsWith("{")?"(?:.+?)":e)).join("/"))).map((e=>`(?:${e})`)).join("|")})[^/]*$`;return new RegExp(t,"i")}(),ke=ve.test.bind(ve),Se={};function Oe(e,t){const{enabled:s=!0,Bottleneck:r=me,id:o="no-id",timeout:n=12e4,connection:i}=t.throttle||{};if(!s)return{};const a={connection:i,timeout:n};null==Se.global&&function(e,t){Se.global=new e.Group({id:"octokit-global",maxConcurrent:10,...t}),Se.search=new e.Group({id:"octokit-search",maxConcurrent:1,minTime:2e3,...t}),Se.write=new e.Group({id:"octokit-write",maxConcurrent:1,minTime:1e3,...t}),Se.notifications=new e.Group({id:"octokit-notifications",maxConcurrent:1,minTime:3e3,...t})}(r,a);const c=Object.assign({clustering:null!=i,triggersNotification:ke,fallbackSecondaryRateRetryAfter:60,retryAfterBaseValue:1e3,retryLimiter:new r,id:o,...Se},t.throttle);if("function"!=typeof c.onSecondaryRateLimit||"function"!=typeof c.onRateLimit)throw new Error("octokit/plugin-throttling error:\n        You must pass the onSecondaryRateLimit and onRateLimit error handlers.\n        See https://octokit.github.io/rest.js/#throttling\n\n        const octokit = new Octokit({\n          throttle: {\n            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},\n            onRateLimit: (retryAfter, options) => {/* ... */}\n          }\n        })\n    ");const l={},u=new r.Events(l);return l.on("secondary-limit",c.onSecondaryRateLimit),l.on("rate-limit",c.onRateLimit),l.on("error",(t=>e.log.warn("Error in throttling-plugin limit handler",t))),c.retryLimiter.on("failed",(async function(t,s){const[r,o,n]=s.args,{pathname:i}=new URL(n.url,"http://github.test");if((!i.startsWith("/graphql")||401===t.status)&&403!==t.status)return;const a=~~o.retryCount;o.retryCount=a,n.request.retryCount=a;const{wantRetry:c,retryAfter:l=0}=await async function(){if(/\bsecondary rate\b/i.test(t.message)){const s=Number(t.response.headers["retry-after"])||r.fallbackSecondaryRateRetryAfter;return{wantRetry:await u.trigger("secondary-limit",s,n,e,a),retryAfter:s}}if(null!=t.response.headers&&"0"===t.response.headers["x-ratelimit-remaining"]||(t.response.data?.errors??[]).some((e=>"RATE_LIMITED"===e.type))){const s=new Date(1e3*~~t.response.headers["x-ratelimit-reset"]).getTime(),r=Math.max(Math.ceil((s-Date.now())/1e3)+1,0);return{wantRetry:await u.trigger("rate-limit",r,n,e,a),retryAfter:r}}return{}}();return c?(o.retryCount++,l*r.retryAfterBaseValue):void 0})),e.hook.wrap("request",we.bind(null,c)),{}}function Ae(e){const t=e.endpoint.DEFAULTS;return/^https:\/\/(api\.)?github\.com$/.test(t.baseUrl)?"https://github.com":t.baseUrl.replace("/api/v3","")}async function Pe(t,s,r){const o={baseUrl:Ae(t),headers:{accept:"application/json"},...r},n=await t(s,o);if("error"in n.data){const r=new e(`${n.data.error_description} (${n.data.error}, ${n.data.error_uri})`,400,{request:t.endpoint.merge(s,o)});throw r.response=n,r}return n}function Ge(e,t){return new Date(e+1e3*t).toISOString()}async function Re(e){const t=e.request||D,s=await Pe(t,"POST /login/oauth/access_token",{client_id:e.clientId,device_code:e.code,grant_type:"urn:ietf:params:oauth:grant-type:device_code"}),r={clientType:e.clientType,clientId:e.clientId,token:s.data.access_token,scopes:s.data.scope.split(/\s+/).filter(Boolean)};if("clientSecret"in e&&(r.clientSecret=e.clientSecret),"github-app"===e.clientType){if("refresh_token"in s.data){const e=new Date(s.headers.date).getTime();r.refreshToken=s.data.refresh_token,r.expiresAt=Fe(e,s.data.expires_in),r.refreshTokenExpiresAt=Fe(e,s.data.refresh_token_expires_in)}delete r.scopes}return{...s,authentication:r}}function Fe(e,t){return new Date(e+1e3*t).toISOString()}async function De(e){const t=e.request||D,s=await t("POST /applications/{client_id}/token",{headers:{authorization:`basic ${btoa(`${e.clientId}:${e.clientSecret}`)}`},client_id:e.clientId,access_token:e.token}),r={clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.token,scopes:s.data.scopes};return s.data.expires_at&&(r.expiresAt=s.data.expires_at),"github-app"===e.clientType&&delete r.scopes,{...s,authentication:r}}async function Ie(e){const t=e.request||D,s=await Pe(t,"POST /login/oauth/access_token",{client_id:e.clientId,client_secret:e.clientSecret,grant_type:"refresh_token",refresh_token:e.refreshToken}),r=new Date(s.headers.date).getTime(),o={clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,token:s.data.access_token,refreshToken:s.data.refresh_token,expiresAt:Ue(r,s.data.expires_in),refreshTokenExpiresAt:Ue(r,s.data.refresh_token_expires_in)};return{...s,authentication:o}}function Ue(e,t){return new Date(e+1e3*t).toISOString()}async function Ce(e){const t=e.request||D,s=btoa(`${e.clientId}:${e.clientSecret}`),r=await t("PATCH /applications/{client_id}/token",{headers:{authorization:`basic ${s}`},client_id:e.clientId,access_token:e.token}),o={clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:r.data.token,scopes:r.data.scopes};return r.data.expires_at&&(o.expiresAt=r.data.expires_at),"github-app"===e.clientType&&delete o.scopes,{...r,authentication:o}}async function Le(e){return(e.request||D)("DELETE /applications/{client_id}/token",{headers:{authorization:`basic ${btoa(`${e.clientId}:${e.clientSecret}`)}`},client_id:e.clientId,access_token:e.token})}async function je(e){return(e.request||D)("DELETE /applications/{client_id}/grant",{headers:{authorization:`basic ${btoa(`${e.clientId}:${e.clientSecret}`)}`},client_id:e.clientId,access_token:e.token})}async function qe(e,t){const s=function(e,t){if(!0===t.refresh)return!1;if(!e.authentication)return!1;if("github-app"===e.clientType)return e.authentication;const s=e.authentication;return("scopes"in t&&t.scopes||e.scopes).join(" ")===s.scopes.join(" ")&&s}(e,t.auth);if(s)return s;const{data:r}=await async function(e){const t=e.request||D,s={client_id:e.clientId};return"scopes"in e&&Array.isArray(e.scopes)&&(s.scope=e.scopes.join(" ")),Pe(t,"POST /login/device/code",s)}({clientType:e.clientType,clientId:e.clientId,request:t.request||e.request,scopes:t.auth.scopes||e.scopes});await e.onVerification(r);const o=await ze(t.request||e.request,e.clientId,e.clientType,r);return e.authentication=o,o}async function xe(e){await new Promise((t=>setTimeout(t,1e3*e)))}async function ze(e,t,s,r){try{const o={clientId:t,request:e,code:r.device_code},{authentication:n}="oauth-app"===s?await Re({...o,clientType:"oauth-app"}):await Re({...o,clientType:"github-app"});return{type:"token",tokenType:"oauth",...n}}catch(o){if(!o.response)throw o;const n=o.response.data.error;if("authorization_pending"===n)return await xe(r.interval),ze(e,t,s,r);if("slow_down"===n)return await xe(r.interval+5),ze(e,t,s,r);throw o}}async function $e(e,t){return qe(e,{auth:t})}async function Ne(e,t,s,r){let o=t.endpoint.merge(s,r);if(/\/login\/(oauth\/access_token|device\/code)$/.test(o.url))return t(o);const{token:n}=await qe(e,{request:t,auth:{type:"oauth"}});return o.headers.authorization=`token ${n}`,t(o)}Oe.VERSION="0.0.0-development",Oe.triggersNotification=ke;var Be="0.0.0-development";function Ve(e){const t=e.request||D.defaults({headers:{"user-agent":`octokit-auth-oauth-device.js/${Be} ${a()}`}}),{request:s=t,...r}=e,o="github-app"===e.clientType?{...r,clientType:"github-app",request:s}:{...r,clientType:"oauth-app",request:s,scopes:e.scopes||[]};if(!e.clientId)throw new Error('[@octokit/auth-oauth-device] "clientId" option must be set (https://github.com/octokit/auth-oauth-device.js#usage)');if(!e.onVerification)throw new Error('[@octokit/auth-oauth-device] "onVerification" option must be a function (https://github.com/octokit/auth-oauth-device.js#usage)');return Object.assign($e.bind(null,o),{hook:Ne.bind(null,o)})}var We="0.0.0-development";async function Me(e,t={}){if(e.authentication||(e.authentication=(e.clientType,await async function(e){if("code"in e.strategyOptions){const{authentication:t}=await async function(e){const t=e.request||D,s=await Pe(t,"POST /login/oauth/access_token",{client_id:e.clientId,client_secret:e.clientSecret,code:e.code,redirect_uri:e.redirectUrl}),r={clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:s.data.access_token,scopes:s.data.scope.split(/\s+/).filter(Boolean)};if("github-app"===e.clientType){if("refresh_token"in s.data){const e=new Date(s.headers.date).getTime();r.refreshToken=s.data.refresh_token,r.expiresAt=Ge(e,s.data.expires_in),r.refreshTokenExpiresAt=Ge(e,s.data.refresh_token_expires_in)}delete r.scopes}return{...s,authentication:r}}({clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,onTokenCreated:e.onTokenCreated,...e.strategyOptions,request:e.request});return{type:"token",tokenType:"oauth",...t}}if("onVerification"in e.strategyOptions){const t=Ve({clientType:e.clientType,clientId:e.clientId,onTokenCreated:e.onTokenCreated,...e.strategyOptions,request:e.request}),s=await t({type:"oauth"});return{clientSecret:e.clientSecret,...s}}if("token"in e.strategyOptions)return{type:"token",tokenType:"oauth",clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,onTokenCreated:e.onTokenCreated,...e.strategyOptions};throw new Error("[@octokit/auth-oauth-user] Invalid strategy options")}(e))),e.authentication.invalid)throw new Error("[@octokit/auth-oauth-user] Token is invalid");const s=e.authentication;if("expiresAt"in s&&("refresh"===t.type||new Date(s.expiresAt)<new Date)){const{authentication:t}=await Ie({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:s.refreshToken,request:e.request});e.authentication={tokenType:"oauth",type:"token",...t}}if("refresh"===t.type){if("oauth-app"===e.clientType)throw new Error("[@octokit/auth-oauth-user] OAuth Apps do not support expiring tokens");if(!s.hasOwnProperty("expiresAt"))throw new Error("[@octokit/auth-oauth-user] Refresh token missing");await(e.onTokenCreated?.(e.authentication,{type:t.type}))}if("check"===t.type||"reset"===t.type){const s="check"===t.type?De:Ce;try{const{authentication:r}=await s({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.authentication.token,request:e.request});return e.authentication={tokenType:"oauth",type:"token",...r},"reset"===t.type&&await(e.onTokenCreated?.(e.authentication,{type:t.type})),e.authentication}catch(t){throw 404===t.status&&(t.message="[@octokit/auth-oauth-user] Token is invalid",e.authentication.invalid=!0),t}}if("delete"===t.type||"deleteAuthorization"===t.type){const s="delete"===t.type?Le:je;try{await s({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.authentication.token,request:e.request})}catch(e){if(404!==e.status)throw e}return e.authentication.invalid=!0,e.authentication}return e.authentication}var He=/\/applications\/[^/]+\/(token|grant)s?/;function Ke(e){return e&&He.test(e)}async function Ye(e,t,s,r={}){const o=t.endpoint.merge(s,r);if(/\/login\/(oauth\/access_token|device\/code)$/.test(o.url))return t(o);if(Ke(o.url)){const s=btoa(`${e.clientId}:${e.clientSecret}`);return o.headers.authorization=`basic ${s}`,t(o)}const{token:n}=(e.clientType,await Me({...e,request:t}));return o.headers.authorization="token "+n,t(o)}function Je({clientId:e,clientSecret:t,clientType:s="oauth-app",request:r=D.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${We} ${a()}`}}),onTokenCreated:o,...n}){const i=Object.assign({clientType:s,clientId:e,clientSecret:t,onTokenCreated:o,strategyOptions:n,request:r});return Object.assign(Me.bind(null,i),{hook:Ye.bind(null,i)})}async function Qe(e,t){if("oauth-app"===t.type)return{type:"oauth-app",clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,headers:{authorization:`basic ${btoa(`${e.clientId}:${e.clientSecret}`)}`}};if("factory"in t){const{type:s,...r}={...t,...e};return t.factory(r)}const s={clientId:e.clientId,clientSecret:e.clientSecret,request:e.request,...t};return(e.clientType,await Je({...s,clientType:e.clientType}))()}async function Xe(e,t,s,r){let o=t.endpoint.merge(s,r);if(/\/login\/(oauth\/access_token|device\/code)$/.test(o.url))return t(o);if("github-app"===e.clientType&&!Ke(o.url))throw new Error(`[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than "/applications/{client_id}/**". "${o.method} ${o.url}" is not supported.`);const n=btoa(`${e.clientId}:${e.clientSecret}`);o.headers.authorization=`basic ${n}`;try{return await t(o)}catch(e){if(401!==e.status)throw e;throw e.message=`[@octokit/auth-oauth-app] "${o.method} ${o.url}" does not support clientId/clientSecret basic authentication.`,e}}Je.VERSION=We;var Ze="0.0.0-development";function et(e){const t=Object.assign({request:D.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${Ze} ${a()}`}}),clientType:"oauth-app"},e);return Object.assign(Qe.bind(null,t),{hook:Xe.bind(null,t)})}function tt(e){return e.includes("-----BEGIN RSA PRIVATE KEY-----")}function st(e){const t=new ArrayBuffer(e.length),s=new Uint8Array(t);for(let t=0,r=e.length;t<r;t++)s[t]=e.charCodeAt(t);return t}function rt(e){return e.replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")}function ot(e){return rt(btoa(JSON.stringify(e)))}const nt=require("node:crypto");async function it({privateKey:e,payload:t}){const s=function(e){return tt(e)?(0,nt.createPrivateKey)(e).export({type:"pkcs8",format:"pem"}):e}(e);if(tt(s))throw new Error("[universal-github-app-jwt] Private Key is in PKCS#1 format, but only PKCS#8 is supported. See https://github.com/gr2m/universal-github-app-jwt#private-key-formats");if(function(e){return e.includes("-----BEGIN OPENSSH PRIVATE KEY-----")}(s))throw new Error("[universal-github-app-jwt] Private Key is in OpenSSH format, but only PKCS#8 is supported. See https://github.com/gr2m/universal-github-app-jwt#private-key-formats");const r={name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}},o=function(e){const t=e.trim().split("\n").slice(1,-1).join("");return st(atob(t))}(s),n=await nt.subtle.importKey("pkcs8",o,r,!1,["sign"]),i=function(e,t){return`${ot({alg:"RS256",typ:"JWT"})}.${ot(t)}`}(0,t),a=st(i);return`${i}.${function(e){for(var t="",s=new Uint8Array(e),r=s.byteLength,o=0;o<r;o++)t+=String.fromCharCode(s[o]);return rt(btoa(t))}(await nt.subtle.sign(r.name,n,a))}`}const at="object"==typeof performance&&performance&&"function"==typeof performance.now?performance:Date,ct=new Set,lt="object"==typeof process&&process?process:{},ut=(e,t,s,r)=>{"function"==typeof lt.emitWarning?lt.emitWarning(e,t,s,r):console.error(`[${s}] ${t}: ${e}`)};let pt=globalThis.AbortController,dt=globalThis.AbortSignal;if(void 0===pt){dt=class{onabort;_onabort=[];reason;aborted=!1;addEventListener(e,t){this._onabort.push(t)}},pt=class{constructor(){t()}signal=new dt;abort(e){if(!this.signal.aborted){this.signal.reason=e,this.signal.aborted=!0;for(const t of this.signal._onabort)t(e);this.signal.onabort?.(e)}}};let e="1"!==lt.env?.LRU_CACHE_IGNORE_AC_WARNING;const t=()=>{e&&(e=!1,ut("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.","NO_ABORT_CONTROLLER","ENOTSUP",t))}}Symbol("type");const ht=e=>e&&e===Math.floor(e)&&e>0&&isFinite(e),gt=e=>ht(e)?e<=Math.pow(2,8)?Uint8Array:e<=Math.pow(2,16)?Uint16Array:e<=Math.pow(2,32)?Uint32Array:e<=Number.MAX_SAFE_INTEGER?mt:null:null;class mt extends Array{constructor(e){super(e),this.fill(0)}}class _t{heap;length;static#e=!1;static create(e){const t=gt(e);if(!t)return[];_t.#e=!0;const s=new _t(e,t);return _t.#e=!1,s}constructor(e,t){if(!_t.#e)throw new TypeError("instantiate Stack using Stack.create(n)");this.heap=new t(e),this.length=0}push(e){this.heap[this.length++]=e}pop(){return this.heap[--this.length]}}class ft{#t;#s;#r;#o;#n;ttl;ttlResolution;ttlAutopurge;updateAgeOnGet;updateAgeOnHas;allowStale;noDisposeOnSet;noUpdateTTL;maxEntrySize;sizeCalculation;noDeleteOnFetchRejection;noDeleteOnStaleGet;allowStaleOnFetchAbort;allowStaleOnFetchRejection;ignoreFetchAbort;#i;#a;#c;#l;#u;#p;#d;#h;#g;#m;#_;#f;#T;#y;#E;#w;#b;static unsafeExposeInternals(e){return{starts:e.#T,ttls:e.#y,sizes:e.#f,keyMap:e.#c,keyList:e.#l,valList:e.#u,next:e.#p,prev:e.#d,get head(){return e.#h},get tail(){return e.#g},free:e.#m,isBackgroundFetch:t=>e.#v(t),backgroundFetch:(t,s,r,o)=>e.#k(t,s,r,o),moveToTail:t=>e.#S(t),indexes:t=>e.#O(t),rindexes:t=>e.#A(t),isStale:t=>e.#P(t)}}get max(){return this.#t}get maxSize(){return this.#s}get calculatedSize(){return this.#a}get size(){return this.#i}get fetchMethod(){return this.#n}get dispose(){return this.#r}get disposeAfter(){return this.#o}constructor(e){const{max:t=0,ttl:s,ttlResolution:r=1,ttlAutopurge:o,updateAgeOnGet:n,updateAgeOnHas:i,allowStale:a,dispose:c,disposeAfter:l,noDisposeOnSet:u,noUpdateTTL:p,maxSize:d=0,maxEntrySize:h=0,sizeCalculation:g,fetchMethod:m,noDeleteOnFetchRejection:_,noDeleteOnStaleGet:f,allowStaleOnFetchRejection:T,allowStaleOnFetchAbort:y,ignoreFetchAbort:E}=e;if(0!==t&&!ht(t))throw new TypeError("max option must be a nonnegative integer");const w=t?gt(t):Array;if(!w)throw new Error("invalid max value: "+t);if(this.#t=t,this.#s=d,this.maxEntrySize=h||this.#s,this.sizeCalculation=g,this.sizeCalculation){if(!this.#s&&!this.maxEntrySize)throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");if("function"!=typeof this.sizeCalculation)throw new TypeError("sizeCalculation set to non-function")}if(void 0!==m&&"function"!=typeof m)throw new TypeError("fetchMethod must be a function if specified");if(this.#n=m,this.#w=!!m,this.#c=new Map,this.#l=new Array(t).fill(void 0),this.#u=new Array(t).fill(void 0),this.#p=new w(t),this.#d=new w(t),this.#h=0,this.#g=0,this.#m=_t.create(t),this.#i=0,this.#a=0,"function"==typeof c&&(this.#r=c),"function"==typeof l?(this.#o=l,this.#_=[]):(this.#o=void 0,this.#_=void 0),this.#E=!!this.#r,this.#b=!!this.#o,this.noDisposeOnSet=!!u,this.noUpdateTTL=!!p,this.noDeleteOnFetchRejection=!!_,this.allowStaleOnFetchRejection=!!T,this.allowStaleOnFetchAbort=!!y,this.ignoreFetchAbort=!!E,0!==this.maxEntrySize){if(0!==this.#s&&!ht(this.#s))throw new TypeError("maxSize must be a positive integer if specified");if(!ht(this.maxEntrySize))throw new TypeError("maxEntrySize must be a positive integer if specified");this.#G()}if(this.allowStale=!!a,this.noDeleteOnStaleGet=!!f,this.updateAgeOnGet=!!n,this.updateAgeOnHas=!!i,this.ttlResolution=ht(r)||0===r?r:1,this.ttlAutopurge=!!o,this.ttl=s||0,this.ttl){if(!ht(this.ttl))throw new TypeError("ttl must be a positive integer if specified");this.#R()}if(0===this.#t&&0===this.ttl&&0===this.#s)throw new TypeError("At least one of max, maxSize, or ttl is required");if(!this.ttlAutopurge&&!this.#t&&!this.#s){const e="LRU_CACHE_UNBOUNDED";(e=>!ct.has(e))(e)&&(ct.add(e),ut("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.","UnboundedCacheWarning",e,ft))}}getRemainingTTL(e){return this.#c.has(e)?1/0:0}#R(){const e=new mt(this.#t),t=new mt(this.#t);this.#y=e,this.#T=t,this.#F=(s,r,o=at.now())=>{if(t[s]=0!==r?o:0,e[s]=r,0!==r&&this.ttlAutopurge){const e=setTimeout((()=>{this.#P(s)&&this.delete(this.#l[s])}),r+1);e.unref&&e.unref()}},this.#D=s=>{t[s]=0!==e[s]?at.now():0},this.#I=(o,n)=>{if(e[n]){const i=e[n],a=t[n];if(!i||!a)return;o.ttl=i,o.start=a,o.now=s||r();const c=o.now-a;o.remainingTTL=i-c}};let s=0;const r=()=>{const e=at.now();if(this.ttlResolution>0){s=e;const t=setTimeout((()=>s=0),this.ttlResolution);t.unref&&t.unref()}return e};this.getRemainingTTL=o=>{const n=this.#c.get(o);if(void 0===n)return 0;const i=e[n],a=t[n];return i&&a?i-((s||r())-a):1/0},this.#P=o=>{const n=t[o],i=e[o];return!!i&&!!n&&(s||r())-n>i}}#D=()=>{};#I=()=>{};#F=()=>{};#P=()=>!1;#G(){const e=new mt(this.#t);this.#a=0,this.#f=e,this.#U=t=>{this.#a-=e[t],e[t]=0},this.#C=(e,t,s,r)=>{if(this.#v(t))return 0;if(!ht(s)){if(!r)throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");if("function"!=typeof r)throw new TypeError("sizeCalculation must be a function");if(s=r(t,e),!ht(s))throw new TypeError("sizeCalculation return invalid (expect positive integer)")}return s},this.#L=(t,s,r)=>{if(e[t]=s,this.#s){const s=this.#s-e[t];for(;this.#a>s;)this.#j(!0)}this.#a+=e[t],r&&(r.entrySize=s,r.totalCalculatedSize=this.#a)}}#U=e=>{};#L=(e,t,s)=>{};#C=(e,t,s,r)=>{if(s||r)throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");return 0};*#O({allowStale:e=this.allowStale}={}){if(this.#i)for(let t=this.#g;this.#q(t)&&(!e&&this.#P(t)||(yield t),t!==this.#h);)t=this.#d[t]}*#A({allowStale:e=this.allowStale}={}){if(this.#i)for(let t=this.#h;this.#q(t)&&(!e&&this.#P(t)||(yield t),t!==this.#g);)t=this.#p[t]}#q(e){return void 0!==e&&this.#c.get(this.#l[e])===e}*entries(){for(const e of this.#O())void 0===this.#u[e]||void 0===this.#l[e]||this.#v(this.#u[e])||(yield[this.#l[e],this.#u[e]])}*rentries(){for(const e of this.#A())void 0===this.#u[e]||void 0===this.#l[e]||this.#v(this.#u[e])||(yield[this.#l[e],this.#u[e]])}*keys(){for(const e of this.#O()){const t=this.#l[e];void 0===t||this.#v(this.#u[e])||(yield t)}}*rkeys(){for(const e of this.#A()){const t=this.#l[e];void 0===t||this.#v(this.#u[e])||(yield t)}}*values(){for(const e of this.#O())void 0===this.#u[e]||this.#v(this.#u[e])||(yield this.#u[e])}*rvalues(){for(const e of this.#A())void 0===this.#u[e]||this.#v(this.#u[e])||(yield this.#u[e])}[Symbol.iterator](){return this.entries()}[Symbol.toStringTag]="LRUCache";find(e,t={}){for(const s of this.#O()){const r=this.#u[s],o=this.#v(r)?r.__staleWhileFetching:r;if(void 0!==o&&e(o,this.#l[s],this))return this.get(this.#l[s],t)}}forEach(e,t=this){for(const s of this.#O()){const r=this.#u[s],o=this.#v(r)?r.__staleWhileFetching:r;void 0!==o&&e.call(t,o,this.#l[s],this)}}rforEach(e,t=this){for(const s of this.#A()){const r=this.#u[s],o=this.#v(r)?r.__staleWhileFetching:r;void 0!==o&&e.call(t,o,this.#l[s],this)}}purgeStale(){let e=!1;for(const t of this.#A({allowStale:!0}))this.#P(t)&&(this.delete(this.#l[t]),e=!0);return e}info(e){const t=this.#c.get(e);if(void 0===t)return;const s=this.#u[t],r=this.#v(s)?s.__staleWhileFetching:s;if(void 0===r)return;const o={value:r};if(this.#y&&this.#T){const e=this.#y[t],s=this.#T[t];if(e&&s){const t=e-(at.now()-s);o.ttl=t,o.start=Date.now()}}return this.#f&&(o.size=this.#f[t]),o}dump(){const e=[];for(const t of this.#O({allowStale:!0})){const s=this.#l[t],r=this.#u[t],o=this.#v(r)?r.__staleWhileFetching:r;if(void 0===o||void 0===s)continue;const n={value:o};if(this.#y&&this.#T){n.ttl=this.#y[t];const e=at.now()-this.#T[t];n.start=Math.floor(Date.now()-e)}this.#f&&(n.size=this.#f[t]),e.unshift([s,n])}return e}load(e){this.clear();for(const[t,s]of e){if(s.start){const e=Date.now()-s.start;s.start=at.now()-e}this.set(t,s.value,s)}}set(e,t,s={}){if(void 0===t)return this.delete(e),this;const{ttl:r=this.ttl,start:o,noDisposeOnSet:n=this.noDisposeOnSet,sizeCalculation:i=this.sizeCalculation,status:a}=s;let{noUpdateTTL:c=this.noUpdateTTL}=s;const l=this.#C(e,t,s.size||0,i);if(this.maxEntrySize&&l>this.maxEntrySize)return a&&(a.set="miss",a.maxEntrySizeExceeded=!0),this.delete(e),this;let u=0===this.#i?void 0:this.#c.get(e);if(void 0===u)u=0===this.#i?this.#g:0!==this.#m.length?this.#m.pop():this.#i===this.#t?this.#j(!1):this.#i,this.#l[u]=e,this.#u[u]=t,this.#c.set(e,u),this.#p[this.#g]=u,this.#d[u]=this.#g,this.#g=u,this.#i++,this.#L(u,l,a),a&&(a.set="add"),c=!1;else{this.#S(u);const s=this.#u[u];if(t!==s){if(this.#w&&this.#v(s)){s.__abortController.abort(new Error("replaced"));const{__staleWhileFetching:t}=s;void 0===t||n||(this.#E&&this.#r?.(t,e,"set"),this.#b&&this.#_?.push([t,e,"set"]))}else n||(this.#E&&this.#r?.(s,e,"set"),this.#b&&this.#_?.push([s,e,"set"]));if(this.#U(u),this.#L(u,l,a),this.#u[u]=t,a){a.set="replace";const e=s&&this.#v(s)?s.__staleWhileFetching:s;void 0!==e&&(a.oldValue=e)}}else a&&(a.set="update")}if(0===r||this.#y||this.#R(),this.#y&&(c||this.#F(u,r,o),a&&this.#I(a,u)),!n&&this.#b&&this.#_){const e=this.#_;let t;for(;t=e?.shift();)this.#o?.(...t)}return this}pop(){try{for(;this.#i;){const e=this.#u[this.#h];if(this.#j(!0),this.#v(e)){if(e.__staleWhileFetching)return e.__staleWhileFetching}else if(void 0!==e)return e}}finally{if(this.#b&&this.#_){const e=this.#_;let t;for(;t=e?.shift();)this.#o?.(...t)}}}#j(e){const t=this.#h,s=this.#l[t],r=this.#u[t];return this.#w&&this.#v(r)?r.__abortController.abort(new Error("evicted")):(this.#E||this.#b)&&(this.#E&&this.#r?.(r,s,"evict"),this.#b&&this.#_?.push([r,s,"evict"])),this.#U(t),e&&(this.#l[t]=void 0,this.#u[t]=void 0,this.#m.push(t)),1===this.#i?(this.#h=this.#g=0,this.#m.length=0):this.#h=this.#p[t],this.#c.delete(s),this.#i--,t}has(e,t={}){const{updateAgeOnHas:s=this.updateAgeOnHas,status:r}=t,o=this.#c.get(e);if(void 0!==o){const e=this.#u[o];if(this.#v(e)&&void 0===e.__staleWhileFetching)return!1;if(!this.#P(o))return s&&this.#D(o),r&&(r.has="hit",this.#I(r,o)),!0;r&&(r.has="stale",this.#I(r,o))}else r&&(r.has="miss");return!1}peek(e,t={}){const{allowStale:s=this.allowStale}=t,r=this.#c.get(e);if(void 0===r||!s&&this.#P(r))return;const o=this.#u[r];return this.#v(o)?o.__staleWhileFetching:o}#k(e,t,s,r){const o=void 0===t?void 0:this.#u[t];if(this.#v(o))return o;const n=new pt,{signal:i}=s;i?.addEventListener("abort",(()=>n.abort(i.reason)),{signal:n.signal});const a={signal:n.signal,options:s,context:r},c=(r,o=!1)=>{const{aborted:i}=n.signal,c=s.ignoreFetchAbort&&void 0!==r;if(s.status&&(i&&!o?(s.status.fetchAborted=!0,s.status.fetchError=n.signal.reason,c&&(s.status.fetchAbortIgnored=!0)):s.status.fetchResolved=!0),i&&!c&&!o)return l(n.signal.reason);const p=u;return this.#u[t]===u&&(void 0===r?p.__staleWhileFetching?this.#u[t]=p.__staleWhileFetching:this.delete(e):(s.status&&(s.status.fetchUpdated=!0),this.set(e,r,a.options))),r},l=r=>{const{aborted:o}=n.signal,i=o&&s.allowStaleOnFetchAbort,a=i||s.allowStaleOnFetchRejection,c=a||s.noDeleteOnFetchRejection,l=u;if(this.#u[t]===u&&(c&&void 0!==l.__staleWhileFetching?i||(this.#u[t]=l.__staleWhileFetching):this.delete(e)),a)return s.status&&void 0!==l.__staleWhileFetching&&(s.status.returnedStale=!0),l.__staleWhileFetching;if(l.__returned===l)throw r};s.status&&(s.status.fetchDispatched=!0);const u=new Promise(((t,r)=>{const i=this.#n?.(e,o,a);i&&i instanceof Promise&&i.then((e=>t(void 0===e?void 0:e)),r),n.signal.addEventListener("abort",(()=>{s.ignoreFetchAbort&&!s.allowStaleOnFetchAbort||(t(void 0),s.allowStaleOnFetchAbort&&(t=e=>c(e,!0)))}))})).then(c,(e=>(s.status&&(s.status.fetchRejected=!0,s.status.fetchError=e),l(e)))),p=Object.assign(u,{__abortController:n,__staleWhileFetching:o,__returned:void 0});return void 0===t?(this.set(e,p,{...a.options,status:void 0}),t=this.#c.get(e)):this.#u[t]=p,p}#v(e){if(!this.#w)return!1;const t=e;return!!t&&t instanceof Promise&&t.hasOwnProperty("__staleWhileFetching")&&t.__abortController instanceof pt}async fetch(e,t={}){const{allowStale:s=this.allowStale,updateAgeOnGet:r=this.updateAgeOnGet,noDeleteOnStaleGet:o=this.noDeleteOnStaleGet,ttl:n=this.ttl,noDisposeOnSet:i=this.noDisposeOnSet,size:a=0,sizeCalculation:c=this.sizeCalculation,noUpdateTTL:l=this.noUpdateTTL,noDeleteOnFetchRejection:u=this.noDeleteOnFetchRejection,allowStaleOnFetchRejection:p=this.allowStaleOnFetchRejection,ignoreFetchAbort:d=this.ignoreFetchAbort,allowStaleOnFetchAbort:h=this.allowStaleOnFetchAbort,context:g,forceRefresh:m=!1,status:_,signal:f}=t;if(!this.#w)return _&&(_.fetch="get"),this.get(e,{allowStale:s,updateAgeOnGet:r,noDeleteOnStaleGet:o,status:_});const T={allowStale:s,updateAgeOnGet:r,noDeleteOnStaleGet:o,ttl:n,noDisposeOnSet:i,size:a,sizeCalculation:c,noUpdateTTL:l,noDeleteOnFetchRejection:u,allowStaleOnFetchRejection:p,allowStaleOnFetchAbort:h,ignoreFetchAbort:d,status:_,signal:f};let y=this.#c.get(e);if(void 0===y){_&&(_.fetch="miss");const t=this.#k(e,y,T,g);return t.__returned=t}{const t=this.#u[y];if(this.#v(t)){const e=s&&void 0!==t.__staleWhileFetching;return _&&(_.fetch="inflight",e&&(_.returnedStale=!0)),e?t.__staleWhileFetching:t.__returned=t}const o=this.#P(y);if(!m&&!o)return _&&(_.fetch="hit"),this.#S(y),r&&this.#D(y),_&&this.#I(_,y),t;const n=this.#k(e,y,T,g),i=void 0!==n.__staleWhileFetching&&s;return _&&(_.fetch=o?"stale":"refresh",i&&o&&(_.returnedStale=!0)),i?n.__staleWhileFetching:n.__returned=n}}get(e,t={}){const{allowStale:s=this.allowStale,updateAgeOnGet:r=this.updateAgeOnGet,noDeleteOnStaleGet:o=this.noDeleteOnStaleGet,status:n}=t,i=this.#c.get(e);if(void 0!==i){const t=this.#u[i],a=this.#v(t);return n&&this.#I(n,i),this.#P(i)?(n&&(n.get="stale"),a?(n&&s&&void 0!==t.__staleWhileFetching&&(n.returnedStale=!0),s?t.__staleWhileFetching:void 0):(o||this.delete(e),n&&s&&(n.returnedStale=!0),s?t:void 0)):(n&&(n.get="hit"),a?t.__staleWhileFetching:(this.#S(i),r&&this.#D(i),t))}n&&(n.get="miss")}#x(e,t){this.#d[t]=e,this.#p[e]=t}#S(e){e!==this.#g&&(e===this.#h?this.#h=this.#p[e]:this.#x(this.#d[e],this.#p[e]),this.#x(this.#g,e),this.#g=e)}delete(e){let t=!1;if(0!==this.#i){const s=this.#c.get(e);if(void 0!==s)if(t=!0,1===this.#i)this.clear();else{this.#U(s);const t=this.#u[s];if(this.#v(t)?t.__abortController.abort(new Error("deleted")):(this.#E||this.#b)&&(this.#E&&this.#r?.(t,e,"delete"),this.#b&&this.#_?.push([t,e,"delete"])),this.#c.delete(e),this.#l[s]=void 0,this.#u[s]=void 0,s===this.#g)this.#g=this.#d[s];else if(s===this.#h)this.#h=this.#p[s];else{const e=this.#d[s];this.#p[e]=this.#p[s];const t=this.#p[s];this.#d[t]=this.#d[s]}this.#i--,this.#m.push(s)}}if(this.#b&&this.#_?.length){const e=this.#_;let t;for(;t=e?.shift();)this.#o?.(...t)}return t}clear(){for(const e of this.#A({allowStale:!0})){const t=this.#u[e];if(this.#v(t))t.__abortController.abort(new Error("deleted"));else{const s=this.#l[e];this.#E&&this.#r?.(t,s,"delete"),this.#b&&this.#_?.push([t,s,"delete"])}}if(this.#c.clear(),this.#u.fill(void 0),this.#l.fill(void 0),this.#y&&this.#T&&(this.#y.fill(0),this.#T.fill(0)),this.#f&&this.#f.fill(0),this.#h=0,this.#g=0,this.#m.length=0,this.#a=0,this.#i=0,this.#b&&this.#_){const e=this.#_;let t;for(;t=e?.shift();)this.#o?.(...t)}}}async function Tt({appId:e,privateKey:t,timeDifference:s}){try{const r=await async function({id:e,privateKey:t,now:s=Math.floor(Date.now()/1e3)}){const r=t.replace(/\\n/g,"\n"),o=s-30,n=o+600,i={iat:o,exp:n,iss:e};return{appId:e,expiration:n,token:await it({privateKey:r,payload:i})}}({id:e,privateKey:t,now:s&&Math.floor(Date.now()/1e3)+s});return{type:"app",token:r.token,appId:r.appId,expiresAt:new Date(1e3*r.expiration).toISOString()}}catch(e){throw"-----BEGIN RSA PRIVATE KEY-----"===t?new Error("The 'privateKey` option contains only the first line '-----BEGIN RSA PRIVATE KEY-----'. If you are setting it using a `.env` file, make sure it is set on a single line with newlines replaced by '\n'"):e}}function yt({installationId:e,permissions:t={},repositoryIds:s=[],repositoryNames:r=[]}){const o=Object.keys(t).sort().map((e=>"read"===t[e]?e:`${e}!`)).join(",");return[e,s.sort().join(","),r.join(","),o].filter(Boolean).join("|")}function Et({installationId:e,token:t,createdAt:s,expiresAt:r,repositorySelection:o,permissions:n,repositoryIds:i,repositoryNames:a,singleFileName:c}){return Object.assign({type:"token",tokenType:"installation",token:t,installationId:e,permissions:n,createdAt:s,expiresAt:r,repositorySelection:o},i?{repositoryIds:i}:null,a?{repositoryNames:a}:null,c?{singleFileName:c}:null)}async function wt(e,t,s){const r=Number(t.installationId||e.installationId);if(!r)throw new Error("[@octokit/auth-app] installationId option is required for installation authentication.");if(t.factory){const{type:s,factory:r,oauthApp:o,...n}={...e,...t};return r(n)}const o=Object.assign({installationId:r},t);if(!t.refresh){const t=await async function(e,t){const s=yt(t),r=await e.get(s);if(!r)return;const[o,n,i,a,c,l]=r.split("|");return{token:o,createdAt:n,expiresAt:i,permissions:t.permissions||c.split(/,/).reduce(((e,t)=>(/!$/.test(t)?e[t.slice(0,-1)]="write":e[t]="read",e)),{}),repositoryIds:t.repositoryIds,repositoryNames:t.repositoryNames,singleFileName:l,repositorySelection:a}}(e.cache,o);if(t){const{token:e,createdAt:s,expiresAt:o,permissions:n,repositoryIds:i,repositoryNames:a,singleFileName:c,repositorySelection:l}=t;return Et({installationId:r,token:e,createdAt:s,expiresAt:o,permissions:n,repositorySelection:l,repositoryIds:i,repositoryNames:a,singleFileName:c})}}const n=await Tt(e),i=s||e.request,{data:{token:a,expires_at:c,repositories:l,permissions:u,repository_selection:p,single_file:d}}=await i("POST /app/installations/{installation_id}/access_tokens",{installation_id:r,repository_ids:t.repositoryIds,repositories:t.repositoryNames,permissions:t.permissions,mediaType:{previews:["machine-man"]},headers:{authorization:`bearer ${n.token}`}}),h=u||{},g=p||"all",m=l?l.map((e=>e.id)):void 0,_=l?l.map((e=>e.name)):void 0,f=(new Date).toISOString();return await async function(e,t,s){const r=yt(t),o=t.permissions?"":Object.keys(s.permissions).map((e=>`${e}${"write"===s.permissions[e]?"!":""}`)).join(","),n=[s.token,s.createdAt,s.expiresAt,s.repositorySelection,o,s.singleFileName].join("|");await e.set(r,n)}(e.cache,o,{token:a,createdAt:f,expiresAt:c,repositorySelection:g,permissions:h,repositoryIds:m,repositoryNames:_,singleFileName:d}),Et({installationId:r,token:a,createdAt:f,expiresAt:c,repositorySelection:g,permissions:h,repositoryIds:m,repositoryNames:_,singleFileName:d})}async function bt(e,t){switch(t.type){case"app":return Tt(e);case"oauth-app":return e.oauthApp({type:"oauth-app"});case"installation":return wt(e,{...t,type:"installation"});case"oauth-user":return e.oauthApp(t);default:throw new Error(`Invalid auth type: ${t.type}`)}}var vt=function(e){const t=`^(?:${["/app","/app/hook/config","/app/hook/deliveries","/app/hook/deliveries/{delivery_id}","/app/hook/deliveries/{delivery_id}/attempts","/app/installations","/app/installations/{installation_id}","/app/installations/{installation_id}/access_tokens","/app/installations/{installation_id}/suspended","/app/installation-requests","/marketplace_listing/accounts/{account_id}","/marketplace_listing/plan","/marketplace_listing/plans","/marketplace_listing/plans/{plan_id}/accounts","/marketplace_listing/stubbed/accounts/{account_id}","/marketplace_listing/stubbed/plan","/marketplace_listing/stubbed/plans","/marketplace_listing/stubbed/plans/{plan_id}/accounts","/orgs/{org}/installation","/repos/{owner}/{repo}/installation","/users/{username}/installation"].map((e=>e.split("/").map((e=>e.startsWith("{")?"(?:.+?)":e)).join("/"))).map((e=>`(?:${e})`)).join("|")})$`;return new RegExp(t,"i")}(),kt=5e3;async function St(e,t,s,r){const o=t.endpoint.merge(s,r),n=o.url;if(/\/login\/oauth\/access_token$/.test(n))return t(o);if(function(e){return!!e&&vt.test(e.split("?")[0])}(n.replace(t.endpoint.DEFAULTS.baseUrl,""))){const{token:s}=await Tt(e);let r;o.headers.authorization=`bearer ${s}`;try{r=await t(o)}catch(s){if(function(e){return!(e.message.match(/'Expiration time' claim \('exp'\) must be a numeric value representing the future time at which the assertion expires/)||e.message.match(/'Issued at' claim \('iat'\) must be an Integer representing the time that the assertion was issued/))}(s))throw s;if(void 0===s.response.headers.date)throw s;const r=Math.floor((Date.parse(s.response.headers.date)-Date.parse((new Date).toString()))/1e3);e.log.warn(s.message),e.log.warn(`[@octokit/auth-app] GitHub API time and system time are different by ${r} seconds. Retrying request with the difference accounted for.`);const{token:n}=await Tt({...e,timeDifference:r});return o.headers.authorization=`bearer ${n}`,t(o)}return r}if(Ke(n)){const s=await e.oauthApp({type:"oauth-app"});return o.headers.authorization=s.headers.authorization,t(o)}const{token:i,createdAt:a}=await wt(e,{},t);return o.headers.authorization=`token ${i}`,Ot(e,t,o,a)}async function Ot(e,t,s,r,o=0){const n=+new Date-+new Date(r);try{return await t(s)}catch(i){if(401!==i.status)throw i;if(n>=kt)throw o>0&&(i.message=`After ${o} retries within ${n/1e3}s of creating the installation access token, the response remains 401. At this point, the cause may be an authentication problem or a system outage. Please check https://www.githubstatus.com for status information`),i;const a=1e3*++o;return e.log.warn(`[@octokit/auth-app] Retrying after 401 response to account for token replication delay (retry: ${o}, wait: ${a/1e3}s)`),await new Promise((e=>setTimeout(e,a))),Ot(e,t,s,r,o)}}var At="7.1.0";function Pt(e){if(!e.appId)throw new Error("[@octokit/auth-app] appId option is required");if(!e.privateKey)throw new Error("[@octokit/auth-app] privateKey option is required");if("installationId"in e&&!e.installationId)throw new Error("[@octokit/auth-app] installationId is set to a falsy value");const t=Object.assign({warn:console.warn.bind(console)},e.log),s=e.request||D.defaults({headers:{"user-agent":`octokit-auth-app.js/${At} ${a()}`}}),r=Object.assign({request:s,cache:new ft({max:15e3,ttl:354e4})},e,e.installationId?{installationId:Number(e.installationId)}:{},{log:t,oauthApp:et({clientType:"github-app",clientId:e.clientId||"",clientSecret:e.clientSecret||"",request:s})});return Object.assign(bt.bind(null,r),{hook:St.bind(null,r)})}async function Gt(e){return{type:"unauthenticated",reason:e}}var Rt=/\babuse\b/i;async function Ft(e,t,s,r){const o=t.endpoint.merge(s,r);return t(o).catch((t=>{if(404===t.status)throw t.message=`Not found. May be due to lack of authentication. Reason: ${e}`,t;if(function(e){return 403===e.status&&!!e.response&&"0"===e.response.headers["x-ratelimit-remaining"]}(t))throw t.message=`API rate limit exceeded. This maybe caused by the lack of authentication. Reason: ${e}`,t;if(function(e){return 403===e.status&&Rt.test(e.message)}(t))throw t.message=`You have triggered an abuse detection mechanism. This maybe caused by the lack of authentication. Reason: ${e}`,t;if(401===t.status)throw t.message=`Unauthorized. "${o.method} ${o.url}" failed most likely due to lack of authentication. Reason: ${e}`,t;throw t.status>=400&&t.status<500&&(t.message=t.message.replace(/\.?$/,`. May be caused by lack of authentication (${e}).`)),t}))}var Dt=function(e){if(!e||!e.reason)throw new Error("[@octokit/auth-unauthenticated] No reason passed to createUnauthenticatedAuth");return Object.assign(Gt.bind(null,e.reason),{hook:Ft.bind(null,e.reason)})},It="7.1.2";function Ut(e,t,s){if(Array.isArray(t))for(const r of t)Ut(e,r,s);else e.eventHandlers[t]||(e.eventHandlers[t]=[]),e.eventHandlers[t].push(s)}var Ct=Y.defaults({userAgent:`octokit-oauth-app.js/${It} ${a()}`});async function Lt(e,t){const{name:s,action:r}=t;if(e.eventHandlers[`${s}.${r}`])for(const o of e.eventHandlers[`${s}.${r}`])await o(t);if(e.eventHandlers[s])for(const r of e.eventHandlers[s])await r(t)}async function jt(e,t){return e.octokit.auth({type:"oauth-user",...t,async factory(t){const s=new e.Octokit({authStrategy:Je,auth:t}),r=await s.auth({type:"get"});return await Lt(e,{name:"token",action:"created",token:r.token,scopes:r.scopes,authentication:r,octokit:s}),s}})}function qt(e,t){const s={clientId:e.clientId,request:e.octokit.request,...t,allowSignup:e.allowSignup??t.allowSignup,redirectUrl:t.redirectUrl??e.redirectUrl,scopes:t.scopes??e.defaultScopes};return function({request:e=D,...t}){return function(e){const t=e.clientType||"oauth-app",s=e.baseUrl||"https://github.com",r={clientType:t,allowSignup:!1!==e.allowSignup,clientId:e.clientId,login:e.login||null,redirectUrl:e.redirectUrl||null,state:e.state||Math.random().toString(36).substr(2),url:""};if("oauth-app"===t){const t="scopes"in e?e.scopes:[];r.scopes="string"==typeof t?t.split(/[,\s]+/).filter(Boolean):t}return r.url=function(e,t){const s={allowSignup:"allow_signup",clientId:"client_id",login:"login",redirectUrl:"redirect_uri",scopes:"scope",state:"state"};let r=e;return Object.keys(s).filter((e=>null!==t[e])).filter((e=>"scopes"!==e||"github-app"!==t.clientType&&(!Array.isArray(t[e])||t[e].length>0))).map((e=>[s[e],`${t[e]}`])).forEach((([e,t],s)=>{r+=0===s?"?":"&",r+=`${e}=${encodeURIComponent(t)}`})),r}(`${s}/login/oauth/authorize`,r),r}({...t,baseUrl:Ae(e)})}({clientType:e.clientType,...s})}async function xt(e,t){const s=await e.octokit.auth({type:"oauth-user",...t});return await Lt(e,{name:"token",action:"created",token:s.token,scopes:s.scopes,authentication:s,octokit:new e.Octokit({authStrategy:Je,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:s.token,scopes:s.scopes,refreshToken:s.refreshToken,expiresAt:s.expiresAt,refreshTokenExpiresAt:s.refreshTokenExpiresAt}})}),{authentication:s}}async function zt(e,t){const s=await De({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t});return Object.assign(s.authentication,{type:"token",tokenType:"oauth"}),s}async function $t(e,t){const s={clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t};if("oauth-app"===e.clientType){const t=await Ce({clientType:"oauth-app",...s}),r=Object.assign(t.authentication,{type:"token",tokenType:"oauth"});return await Lt(e,{name:"token",action:"reset",token:t.authentication.token,scopes:t.authentication.scopes||void 0,authentication:r,octokit:new e.Octokit({authStrategy:Je,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:t.authentication.token,scopes:t.authentication.scopes}})}),{...t,authentication:r}}const r=await Ce({clientType:"github-app",...s}),o=Object.assign(r.authentication,{type:"token",tokenType:"oauth"});return await Lt(e,{name:"token",action:"reset",token:r.authentication.token,authentication:o,octokit:new e.Octokit({authStrategy:Je,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:r.authentication.token}})}),{...r,authentication:o}}async function Nt(e,t){if("oauth-app"===e.clientType)throw new Error("[@octokit/oauth-app] app.refreshToken() is not supported for OAuth Apps");const s=await Ie({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,refreshToken:t.refreshToken}),r=Object.assign(s.authentication,{type:"token",tokenType:"oauth"});return await Lt(e,{name:"token",action:"refreshed",token:s.authentication.token,authentication:r,octokit:new e.Octokit({authStrategy:Je,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:s.authentication.token}})}),{...s,authentication:r}}async function Bt(e,t){if("oauth-app"===e.clientType)throw new Error("[@octokit/oauth-app] app.scopeToken() is not supported for OAuth Apps");const s=await async function(e){const{request:t,clientType:s,clientId:r,clientSecret:o,token:n,...i}=e,a=t||D,c=await a("POST /applications/{client_id}/token/scoped",{headers:{authorization:`basic ${btoa(`${r}:${o}`)}`},client_id:r,access_token:n,...i}),l=Object.assign({clientType:s,clientId:r,clientSecret:o,token:c.data.token},c.data.expires_at?{expiresAt:c.data.expires_at}:{});return{...c,authentication:l}}({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t}),r=Object.assign(s.authentication,{type:"token",tokenType:"oauth"});return await Lt(e,{name:"token",action:"scoped",token:s.authentication.token,authentication:r,octokit:new e.Octokit({authStrategy:Je,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:s.authentication.token}})}),{...s,authentication:r}}async function Vt(e,t){const s={clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t},r="oauth-app"===e.clientType?await Le({clientType:"oauth-app",...s}):await Le({clientType:"github-app",...s});return await Lt(e,{name:"token",action:"deleted",token:t.token,octokit:new e.Octokit({authStrategy:Dt,auth:{reason:'Handling "token.deleted" event. The access for the token has been revoked.'}})}),r}async function Wt(e,t){const s={clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t},r="oauth-app"===e.clientType?await je({clientType:"oauth-app",...s}):await je({clientType:"github-app",...s});return await Lt(e,{name:"token",action:"deleted",token:t.token,octokit:new e.Octokit({authStrategy:Dt,auth:{reason:'Handling "token.deleted" event. The access for the token has been revoked.'}})}),await Lt(e,{name:"authorization",action:"deleted",token:t.token,octokit:new e.Octokit({authStrategy:Dt,auth:{reason:'Handling "authorization.deleted" event. The access for the app has been revoked.'}})}),r}var Mt=class{static VERSION=It;static defaults(e){return class extends(this){constructor(...t){super({...e,...t[0]})}}}constructor(e){const t=e.Octokit||Ct;this.type=e.clientType||"oauth-app";const s=new t({authStrategy:et,auth:{clientType:this.type,clientId:e.clientId,clientSecret:e.clientSecret}}),r={clientType:this.type,clientId:e.clientId,clientSecret:e.clientSecret,defaultScopes:e.defaultScopes||[],allowSignup:e.allowSignup,baseUrl:e.baseUrl,redirectUrl:e.redirectUrl,log:e.log,Octokit:t,octokit:s,eventHandlers:{}};this.on=Ut.bind(null,r),this.octokit=s,this.getUserOctokit=jt.bind(null,r),this.getWebFlowAuthorizationUrl=qt.bind(null,r),this.createToken=xt.bind(null,r),this.checkToken=zt.bind(null,r),this.resetToken=$t.bind(null,r),this.refreshToken=Nt.bind(null,r),this.scopeToken=Bt.bind(null,r),this.deleteToken=Vt.bind(null,r),this.deleteAuthorization=Wt.bind(null,r)}type;on;octokit;getUserOctokit;getWebFlowAuthorizationUrl;createToken;checkToken;resetToken;refreshToken;scopeToken;deleteToken;deleteAuthorization};const Ht=require("node:os"),Kt=/\s+at.*[(\s](.*)\)?/,Yt=/^(?:(?:(?:node|node:[\w/]+|(?:(?:node:)?internal\/[\w/]*|.*node_modules\/(?:babel-polyfill|pirates)\/.*)?\w+)(?:\.js)?:\d+:\d+)|native)/;function Jt(e,{pretty:t=!1,basePath:s,pathFilter:r}={}){const o=s&&new RegExp(`(file://)?${function(e){if("string"!=typeof e)throw new TypeError("Expected a string");return e.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&").replace(/-/g,"\\x2d")}(s.replace(/\\/g,"/"))}/?`,"g"),n=t?Ht.homedir().replace(/\\/g,"/"):"";if("string"==typeof e)return e.replace(/\\/g,"/").split("\n").filter((e=>{const t=e.match(Kt);if(null===t||!t[1])return!0;const s=t[1];return!(s.includes(".app/Contents/Resources/electron.asar")||s.includes(".app/Contents/Resources/default_app.asar")||s.includes("node_modules/electron/dist/resources/electron.asar")||s.includes("node_modules/electron/dist/resources/default_app.asar"))&&(r?!Yt.test(s)&&r(s):!Yt.test(s))})).filter((e=>""!==e.trim())).map((e=>(o&&(e=e.replace(o,"")),t&&(e=e.replace(Kt,((e,t)=>e.replace(t,t.replace(n,"~"))))),e))).join("\n")}class Qt extends Error{#z;name="AggregateError";constructor(e){if(!Array.isArray(e))throw new TypeError("Expected input to be an Array, got "+typeof e);let t=(e=e.map((e=>e instanceof Error?e:null!==e&&"object"==typeof e?Object.assign(new Error(e.message),e):new Error(e)))).map((e=>"string"==typeof e.stack&&e.stack.length>0?Jt(e.stack).replaceAll(/\s+at .*aggregate-error\/index.js:\d+:\d+\)?/g,""):String(e))).join("\n");t="\n"+function(e,t=1,s={}){const{indent:r=" ",includeEmptyLines:o=!1}=s;if("string"!=typeof e)throw new TypeError(`Expected \`input\` to be a \`string\`, got \`${typeof e}\``);if("number"!=typeof t)throw new TypeError(`Expected \`count\` to be a \`number\`, got \`${typeof t}\``);if(t<0)throw new RangeError(`Expected \`count\` to be at least 0, got \`${t}\``);if("string"!=typeof r)throw new TypeError(`Expected \`options.indent\` to be a \`string\`, got \`${typeof r}\``);if(0===t)return e;const n=o?/^/gm:/^(?!\s*$)/gm;return e.replace(n,r.repeat(t))}(t,4),super(t),this.#z=e}get errors(){return[...this.#z]}}const Xt=require("node:buffer");var Zt="5.1.0";async function es(e,t){if(!e||!t)throw new TypeError("[@octokit/webhooks-methods] secret & payload required for sign()");if("string"!=typeof t)throw new TypeError("[@octokit/webhooks-methods] payload must be a string");const s="sha256";return`${s}=${(0,nt.createHmac)(s,e).update(t).digest("hex")}`}async function ts(e,t,s){if(!e||!t||!s)throw new TypeError("[@octokit/webhooks-methods] secret, eventPayload & signature required");if("string"!=typeof t)throw new TypeError("[@octokit/webhooks-methods] eventPayload must be a string");const r=Xt.Buffer.from(s),o=Xt.Buffer.from(await es(e,t));return r.length===o.length&&(0,nt.timingSafeEqual)(r,o)}es.VERSION=Zt,ts.VERSION=Zt;var ss=e=>({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console),...e}),rs=["branch_protection_configuration","branch_protection_configuration.disabled","branch_protection_configuration.enabled","branch_protection_rule","branch_protection_rule.created","branch_protection_rule.deleted","branch_protection_rule.edited","check_run","check_run.completed","check_run.created","check_run.requested_action","check_run.rerequested","check_suite","check_suite.completed","check_suite.requested","check_suite.rerequested","code_scanning_alert","code_scanning_alert.appeared_in_branch","code_scanning_alert.closed_by_user","code_scanning_alert.created","code_scanning_alert.fixed","code_scanning_alert.reopened","code_scanning_alert.reopened_by_user","commit_comment","commit_comment.created","create","custom_property","custom_property.created","custom_property.deleted","custom_property.updated","custom_property_values","custom_property_values.updated","delete","dependabot_alert","dependabot_alert.auto_dismissed","dependabot_alert.auto_reopened","dependabot_alert.created","dependabot_alert.dismissed","dependabot_alert.fixed","dependabot_alert.reintroduced","dependabot_alert.reopened","deploy_key","deploy_key.created","deploy_key.deleted","deployment","deployment.created","deployment_protection_rule","deployment_protection_rule.requested","deployment_review","deployment_review.approved","deployment_review.rejected","deployment_review.requested","deployment_status","deployment_status.created","discussion","discussion.answered","discussion.category_changed","discussion.closed","discussion.created","discussion.deleted","discussion.edited","discussion.labeled","discussion.locked","discussion.pinned","discussion.reopened","discussion.transferred","discussion.unanswered","discussion.unlabeled","discussion.unlocked","discussion.unpinned","discussion_comment","discussion_comment.created","discussion_comment.deleted","discussion_comment.edited","fork","github_app_authorization","github_app_authorization.revoked","gollum","installation","installation.created","installation.deleted","installation.new_permissions_accepted","installation.suspend","installation.unsuspend","installation_repositories","installation_repositories.added","installation_repositories.removed","installation_target","installation_target.renamed","issue_comment","issue_comment.created","issue_comment.deleted","issue_comment.edited","issues","issues.assigned","issues.closed","issues.deleted","issues.demilestoned","issues.edited","issues.labeled","issues.locked","issues.milestoned","issues.opened","issues.pinned","issues.reopened","issues.transferred","issues.unassigned","issues.unlabeled","issues.unlocked","issues.unpinned","label","label.created","label.deleted","label.edited","marketplace_purchase","marketplace_purchase.cancelled","marketplace_purchase.changed","marketplace_purchase.pending_change","marketplace_purchase.pending_change_cancelled","marketplace_purchase.purchased","member","member.added","member.edited","member.removed","membership","membership.added","membership.removed","merge_group","merge_group.checks_requested","merge_group.destroyed","meta","meta.deleted","milestone","milestone.closed","milestone.created","milestone.deleted","milestone.edited","milestone.opened","org_block","org_block.blocked","org_block.unblocked","organization","organization.deleted","organization.member_added","organization.member_invited","organization.member_removed","organization.renamed","package","package.published","package.updated","page_build","personal_access_token_request","personal_access_token_request.approved","personal_access_token_request.cancelled","personal_access_token_request.created","personal_access_token_request.denied","ping","project","project.closed","project.created","project.deleted","project.edited","project.reopened","project_card","project_card.converted","project_card.created","project_card.deleted","project_card.edited","project_card.moved","project_column","project_column.created","project_column.deleted","project_column.edited","project_column.moved","projects_v2","projects_v2.closed","projects_v2.created","projects_v2.deleted","projects_v2.edited","projects_v2.reopened","projects_v2_item","projects_v2_item.archived","projects_v2_item.converted","projects_v2_item.created","projects_v2_item.deleted","projects_v2_item.edited","projects_v2_item.reordered","projects_v2_item.restored","public","pull_request","pull_request.assigned","pull_request.auto_merge_disabled","pull_request.auto_merge_enabled","pull_request.closed","pull_request.converted_to_draft","pull_request.demilestoned","pull_request.dequeued","pull_request.edited","pull_request.enqueued","pull_request.labeled","pull_request.locked","pull_request.milestoned","pull_request.opened","pull_request.ready_for_review","pull_request.reopened","pull_request.review_request_removed","pull_request.review_requested","pull_request.synchronize","pull_request.unassigned","pull_request.unlabeled","pull_request.unlocked","pull_request_review","pull_request_review.dismissed","pull_request_review.edited","pull_request_review.submitted","pull_request_review_comment","pull_request_review_comment.created","pull_request_review_comment.deleted","pull_request_review_comment.edited","pull_request_review_thread","pull_request_review_thread.resolved","pull_request_review_thread.unresolved","push","registry_package","registry_package.published","registry_package.updated","release","release.created","release.deleted","release.edited","release.prereleased","release.published","release.released","release.unpublished","repository","repository.archived","repository.created","repository.deleted","repository.edited","repository.privatized","repository.publicized","repository.renamed","repository.transferred","repository.unarchived","repository_advisory","repository_advisory.published","repository_advisory.reported","repository_dispatch","repository_dispatch.sample.collected","repository_import","repository_ruleset","repository_ruleset.created","repository_ruleset.deleted","repository_ruleset.edited","repository_vulnerability_alert","repository_vulnerability_alert.create","repository_vulnerability_alert.dismiss","repository_vulnerability_alert.reopen","repository_vulnerability_alert.resolve","secret_scanning_alert","secret_scanning_alert.created","secret_scanning_alert.reopened","secret_scanning_alert.resolved","secret_scanning_alert.revoked","secret_scanning_alert.validated","secret_scanning_alert_location","secret_scanning_alert_location.created","security_advisory","security_advisory.published","security_advisory.updated","security_advisory.withdrawn","security_and_analysis","sponsorship","sponsorship.cancelled","sponsorship.created","sponsorship.edited","sponsorship.pending_cancellation","sponsorship.pending_tier_change","sponsorship.tier_changed","star","star.created","star.deleted","status","team","team.added_to_repository","team.created","team.deleted","team.edited","team.removed_from_repository","team_add","watch","watch.started","workflow_dispatch","workflow_job","workflow_job.completed","workflow_job.in_progress","workflow_job.queued","workflow_job.waiting","workflow_run","workflow_run.completed","workflow_run.in_progress","workflow_run.requested"];function os(e,t,s){e.hooks[t]||(e.hooks[t]=[]),e.hooks[t].push(s)}function ns(e,t,s){if(Array.isArray(t))t.forEach((t=>ns(e,t,s)));else{if(["*","error"].includes(t)){const e="*"===t?"any":t,s=`Using the "${t}" event with the regular Webhooks.on() function is not supported. Please use the Webhooks.on${e.charAt(0).toUpperCase()+e.slice(1)}() method instead`;throw new Error(s)}rs.includes(t)||e.log.warn(`"${t}" is not a known webhook name (https://developer.github.com/v3/activity/events/types/)`),os(e,t,s)}}function is(e,t){os(e,"*",t)}function as(e,t){os(e,"error",t)}function cs(e,t){let s;try{s=e(t)}catch(e){console.log('FATAL: Error occurred in "error" event handler'),console.log(e)}s&&s.catch&&s.catch((e=>{console.log('FATAL: Error occurred in "error" event handler'),console.log(e)}))}function ls(e,t){const s=e.hooks.error||[];if(t instanceof Error){const e=Object.assign(new Qt([t]),{event:t});return s.forEach((t=>cs(t,e))),Promise.reject(e)}if(!t||!t.name)throw new Qt(["Event name not passed"]);if(!t.payload)throw new Qt(["Event payload not passed"]);const r=function(e,t,s){const r=[e.hooks[s],e.hooks["*"]];return t&&r.unshift(e.hooks[`${s}.${t}`]),[].concat(...r.filter(Boolean))}(e,"action"in t.payload?t.payload.action:null,t.name);if(0===r.length)return Promise.resolve();const o=[],n=r.map((s=>{let r=Promise.resolve(t);return e.transform&&(r=r.then(e.transform)),r.then((e=>s(e))).catch((e=>o.push(Object.assign(e,{event:t}))))}));return Promise.all(n).then((()=>{if(0===o.length)return;const e=new Qt(o);throw Object.assign(e,{event:t}),s.forEach((t=>cs(t,e))),e}))}function us(e,t,s){if(Array.isArray(t))t.forEach((t=>us(e,t,s)));else if(e.hooks[t])for(let r=e.hooks[t].length-1;r>=0;r--)if(e.hooks[t][r]===s)return void e.hooks[t].splice(r,1)}function ps(e){const t={hooks:{},log:ss(e&&e.log)};return e&&e.transform&&(t.transform=e.transform),{on:ns.bind(null,t),onAny:is.bind(null,t),onError:as.bind(null,t),removeListener:us.bind(null,t),receive:ls.bind(null,t)}}async function ds(e,t){if(!await ts(e.secret,t.payload,t.signature).catch((()=>!1))){const s=new Error("[@octokit/webhooks] signature does not match event payload and secret");return e.eventHandler.receive(Object.assign(s,{event:t,status:400}))}let s;try{s=JSON.parse(t.payload)}catch(e){throw e.message="Invalid JSON",e.status=400,new Qt([e])}return e.eventHandler.receive({id:t.id,name:t.name,payload:s})}var hs=class{sign;verify;on;onAny;onError;removeListener;receive;verifyAndReceive;constructor(e){if(!e||!e.secret)throw new Error("[@octokit/webhooks] options.secret required");const t={eventHandler:ps(e),secret:e.secret,hooks:{},log:ss(e.log)};this.sign=es.bind(null,e.secret),this.verify=ts.bind(null,e.secret),this.on=t.eventHandler.on,this.onAny=t.eventHandler.onAny,this.onError=t.eventHandler.onError,this.removeListener=t.eventHandler.removeListener,this.receive=t.eventHandler.receive,this.verifyAndReceive=ds.bind(null,t)}};async function gs(e,t){return e.octokit.auth({type:"installation",installationId:t,factory(e){const s={...e.octokitOptions,authStrategy:Pt,auth:{...e,installationId:t}};return new e.octokit.constructor(s)}})}function ms(e){return Object.assign(_s.bind(null,e),{iterator:fs.bind(null,e)})}async function _s(e,t){const s=fs(e)[Symbol.asyncIterator]();let r=await s.next();for(;!r.done;)await t(r.value),r=await s.next()}function fs(e){return{async*[Symbol.asyncIterator](){const t=Z.iterator(e.octokit,"GET /app/installations");for await(const{data:s}of t)for(const t of s){const s=await gs(e,t.id);yield{octokit:s,installation:t}}}}}function Ts(e){return Object.assign(ys.bind(null,e),{iterator:Es.bind(null,e)})}async function ys(e,t,s){const r=Es(e,s?t:void 0)[Symbol.asyncIterator]();let o=await r.next();for(;!o.done;)s?await s(o.value):await t(o.value),o=await r.next()}function Es(e,t){return{async*[Symbol.asyncIterator](){const s=t?function(e,t){return{async*[Symbol.asyncIterator](){yield{octokit:await e.getInstallationOctokit(t)}}}}(e,t.installationId):e.eachInstallation.iterator();for await(const{octokit:e}of s){const t=Z.iterator(e,"GET /installation/repositories");for await(const{data:s}of t)for(const t of s)yield{octokit:e,repository:t}}}}}var ws=Y.plugin(ge,ee,(function(e){return{graphql:Object.assign(e.graphql,{paginate:Object.assign(ue(e),{iterator:ce(e)})})}}),ye,Oe).defaults({userAgent:"octokit.js/0.0.0-development",throttle:{onRateLimit:function(e,t,s){if(s.log.warn(`Request quota exhausted for request ${t.method} ${t.url}`),0===t.request.retryCount)return s.log.info(`Retrying after ${e} seconds!`),!0},onSecondaryRateLimit:function(e,t,s){if(s.log.warn(`SecondaryRateLimit detected for request ${t.method} ${t.url}`),0===t.request.retryCount)return s.log.info(`Retrying after ${e} seconds!`),!0}}});(class{static VERSION="15.0.1";static defaults(e){return class extends(this){constructor(...t){super({...e,...t[0]})}}}octokit;webhooks;oauth;getInstallationOctokit;eachInstallation;eachRepository;log;constructor(e){const t=e.Octokit||Y,s=Object.assign({appId:e.appId,privateKey:e.privateKey},e.oauth?{clientId:e.oauth.clientId,clientSecret:e.oauth.clientSecret}:{});this.octokit=new t({authStrategy:Pt,auth:s,log:e.log}),this.log=Object.assign({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console)},e.log),e.webhooks?this.webhooks=function(e,t){return new hs({secret:t.secret,transform:async t=>{if(!("installation"in t.payload)||"object"!=typeof t.payload.installation){const s=new e.constructor({authStrategy:Dt,auth:{reason:'"installation" key missing in webhook event payload'}});return{...t,octokit:s}}const s=t.payload.installation.id,r=await e.auth({type:"installation",installationId:s,factory:e=>new e.octokit.constructor({...e.octokitOptions,authStrategy:Pt,auth:{...e,installationId:s}})});return r.hook.before("request",(e=>{e.headers["x-github-delivery"]=t.id})),{...t,octokit:r}}})}(this.octokit,e.webhooks):Object.defineProperty(this,"webhooks",{get(){throw new Error("[@octokit/app] webhooks option not set")}}),e.oauth?this.oauth=new Mt({...e.oauth,clientType:"github-app",Octokit:t}):Object.defineProperty(this,"oauth",{get(){throw new Error("[@octokit/app] oauth.clientId / oauth.clientSecret options are not set")}}),this.getInstallationOctokit=gs.bind(null,this),this.eachInstallation=ms(this),this.eachRepository=Ts(this)}}).defaults({Octokit:ws}),Mt.defaults({Octokit:ws});var bs,vs,ks,Ss,Os=new(ws.plugin(i).defaults({userAgent:"WKL10086-README-Action"}))({auth:process.env.GITHUB_TOKEN});bs=void 0,vs=void 0,Ss=function(){var e,t;return function(e,t){var s,r,o,n,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return n={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function a(a){return function(c){return function(a){if(s)throw new TypeError("Generator is already executing.");for(;n&&(n=0,a[0]&&(i=0)),i;)try{if(s=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{s=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}(this,(function(s){switch(s.label){case 0:return[4,Os.request("GET /repos/{owner}/{repo}/contents/{path}",{owner:"WKL10086",repo:"WKL10086",path:"README.md"}).catch((function(e){console.error("Failed: ",e)}))];case 1:return e=s.sent(),t=Buffer.from(e.data.content,"base64").toString(),console.log("content: ",t),[2]}}))},new((ks=void 0)||(ks=Promise))((function(e,t){function s(e){try{o(Ss.next(e))}catch(e){t(e)}}function r(e){try{o(Ss.throw(e))}catch(e){t(e)}}function o(t){var o;t.done?e(t.value):(o=t.value,o instanceof ks?o:new ks((function(e){e(o)}))).then(s,r)}o((Ss=Ss.apply(bs,vs||[])).next())}))})(),r})()));
//# sourceMappingURL=bundle.js.map